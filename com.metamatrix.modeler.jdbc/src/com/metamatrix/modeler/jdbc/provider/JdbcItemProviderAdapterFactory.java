/* ================================================================================== 
 * JBoss, Home of Professional Open Source. 
 * 
 * Copyright (c) 2000, 2009 MetaMatrix, Inc. and Red Hat, Inc. 
 * 
 * Some portions of this file may be copyrighted by other 
 * contributors and licensed to Red Hat, Inc. under one or more 
 * contributor license agreements. See the copyright.txt file in the 
 * distribution for a full listing of individual contributors. 
 * 
 * This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0 
 * which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html 
 * ================================================================================== */ 

package com.metamatrix.modeler.jdbc.provider;

import com.metamatrix.modeler.jdbc.util.JdbcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JdbcItemProviderAdapterFactory extends JdbcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection supportedTypes = new ArrayList();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public JdbcItemProviderAdapterFactory() {
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemPropertySource.class);
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcSourceProperty} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcSourcePropertyItemProvider jdbcSourcePropertyItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcSourceProperty}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcSourcePropertyAdapter() {
        if (jdbcSourcePropertyItemProvider == null) {
            jdbcSourcePropertyItemProvider = new JdbcSourcePropertyItemProvider(this);
        }

        return jdbcSourcePropertyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcDriver} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcDriverItemProvider jdbcDriverItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcDriver}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcDriverAdapter() {
        if (jdbcDriverItemProvider == null) {
            jdbcDriverItemProvider = new JdbcDriverItemProvider(this);
        }

        return jdbcDriverItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcSource} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcSourceItemProvider jdbcSourceItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcSource}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcSourceAdapter() {
        if (jdbcSourceItemProvider == null) {
            jdbcSourceItemProvider = new JdbcSourceItemProvider(this);
        }

        return jdbcSourceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcDriverContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcDriverContainerItemProvider jdbcDriverContainerItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcDriverContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcDriverContainerAdapter() {
        if (jdbcDriverContainerItemProvider == null) {
            jdbcDriverContainerItemProvider = new JdbcDriverContainerItemProvider(this);
        }

        return jdbcDriverContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcSourceContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcSourceContainerItemProvider jdbcSourceContainerItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcSourceContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcSourceContainerAdapter() {
        if (jdbcSourceContainerItemProvider == null) {
            jdbcSourceContainerItemProvider = new JdbcSourceContainerItemProvider(this);
        }

        return jdbcSourceContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcImportSettings} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcImportSettingsItemProvider jdbcImportSettingsItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcImportSettings}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcImportSettingsAdapter() {
        if (jdbcImportSettingsItemProvider == null) {
            jdbcImportSettingsItemProvider = new JdbcImportSettingsItemProvider(this);
        }

        return jdbcImportSettingsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.metamatrix.modeler.jdbc.JdbcImportOptions} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JdbcImportOptionsItemProvider jdbcImportOptionsItemProvider;

    /**
     * This creates an adapter for a {@link com.metamatrix.modeler.jdbc.JdbcImportOptions}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJdbcImportOptionsAdapter() {
        if (jdbcImportOptionsItemProvider == null) {
            jdbcImportOptionsItemProvider = new JdbcImportOptionsItemProvider(this);
        }

        return jdbcImportOptionsItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

}
