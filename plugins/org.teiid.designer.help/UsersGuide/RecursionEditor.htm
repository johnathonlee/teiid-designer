<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<!--
  JBoss, Home of Professional Open Source.

  See the LEGAL.txt file distributed with this work for information regarding copyright ownership and licensing.

  See the AUTHORS.txt file distributed with this work for a full listing of individual contributors.
-->
  <link rel="stylesheet" href="designer_help.css" type="text/css">
</head>
<body>
<p><a href="DesignerTOC.htm"><img src="images/Designer_WebHeader.png"
 alt="MMHeader" border="0"></a></p>
<hr>
<p class="maintitle_b24">Editing Recursive XML Element </p>
<p class="subtitle_b16"><a name="recursiveXmlSchema"></a>Handling
Recursive XML Schema</p>
<p>Some <strong>XML schemas</strong> define data structures that
contain self-referencing elements or datatypes. When generating XML
documents, such data structures can produce an endless repetition of
nested tags. This self-nesting pattern is known as <strong>recursion</strong>.</p>
<p>When generating virtual documents from<strong> XML Schema</strong>,
the <strong> Designer</strong> detects recursive data structures in
the XML Schema model and halts the recursive nesting pattern after two
cycles. These two cycles serve different purposes when mapping the
document:</p>
<ul>
  <li>The<strong> first cycle </strong>can be thought of as an &#8220;<strong>entry
condition</strong>&#8221; for the <strong>recursion</strong>. The mapping
class located at this node defines a normal mapping transformation like
that of any other in the document model.</li>
  <li>The <strong>second cycle </strong>defines a mapping
transformation that will be performed repeatedly until conditions are
met that will halt the document instance being generated by the Teiid
Server. This fragment of the document model is called the <strong>recursive
fragment</strong>. The mapping transformation for this fragment is no
different from the first, except that you can access the first cycle's
mapping class attributes, plus you have the opportunity to specify the
conditions that will halt the recursion. </li>
</ul>
<p>You can recognize a mapping class located at the second, recursive
document fragment by the looping arrow <img
 src="images/icons/recursion.png" height="16" hspace="5" width="15">button
in the top-left-hand corner of the diagram object as shown below. </p>
<p><img style="border: 1px solid ; width: 329px; height: 363px;"
 alt="Recursive Mapping Class"
 src="images/views/recursive-mapping-class.png" hspace="20"></p>
<p>When you model a virtual document based on an XML Schema model
containing recursion, you can choose whether to treat the nested
fragments as recursive. You should only use recursion when the data
access pattern from your data source(s) is also recursive; in other
words, when the same query transformation should be executed over and
over to generate and map the nested document's data content.</p>
By default, the <strong> Designer</strong> does not mark the recursive
fragments in document models to execute recursively in the Teiid
Server. To take advantage of this behavior, you must open the <strong>Recursion
Editor</strong> in the recursive mapping class<a
 href="DiagramEditor.htm#mappingTransformationDiagram"> mapping
transformation diagram</a>, mark the transformation query as recursive,
and specify the recursion limit properties.
<p class="subtitle_b16"><a name="recursionEditor" id="recursionEditor"></a>Recursion
Editor </p>
<p>The <strong>Recursion Editor</strong> lets you enable and limit
recursion. The Recursion Editor button <img
 src="images/icons/recursion.png" height="16" hspace="5" width="15">only
displays on mapping classes, which have recursive patterns. For
example, if you have an element named Employee which contains a element
named Supervisor which itself contains an Employee element nested
within it, you might need to limit the number of times the elements are
nested within the document.</p>
<p>You can set the following conditions to limit the recursion:</p>
<ul>
  <li>A fixed number of results to the query.</li>
  <li>A SQL-based criteria limit condition.</li>
  <li>A combination of both.</li>
</ul>
<p>To open the Recursion Editor, click on the Recursion Editor button <img
 src="images/icons/recursion.png" height="16" hspace="5" width="15">on
the displayed mapping class. </p>
<p><img style="width: 699px; height: 233px;" alt="Recursion Editor"
 src="images/views/recursion-editor.png" hspace="20"></p>
<p>To edit recursion properties:</p>
<blockquote>
  <p><strong>Step 1:</strong> Click the<strong> Enable Recursion</strong>
check box if you want the Teiid Server to perform the query you specify
to generate the nested tags within the XML document.</p>
  <p><strong>Step 2:</strong> Click the arrows beside the <strong>Count
Limit </strong>box to limit the number of times to recursively perform
the query. If you do not set a Limit Condition in the text area, the
recursion finishes when the query reaches this limit. You can only set
this limit to a maximum supported by your Teiid Server. For more
information about this limit, contact your system administrator</p>
  <p><strong>Step 3:</strong> Click the <strong>Action When Count
Limit Exceeded</strong> drop down menu to instruct the Teiid Server
what to do if it encounters more results for the query than the count
limit before it reaches the limit condition. </p>
  <p><strong>Step 4:</strong> Click the <strong>Edit </strong>button
to launch the SQL <a href="TransformationEditor.htm#criteriaBuilder"><strong>Criteria
Builder</strong></a> to build a limiting condition for this recursion. </p>
  <blockquote>
    <p>The Teiid Server will evaluate this condition each time it
recursively performs this query. If this criteria clause evaluates
false, the Teiid Server performs the query recursively again unless it
has reached the Count Limit. If the criteria evaluates true, the Teiid
Server performs the mapping for the current level and ends its
recursive loop.<br>
    <br>
When you have created the criteria, it displays in the <strong>Limit
Condition </strong>box.</p>
  </blockquote>
</blockquote>
<p>When the Teiid Server dynamically populates your XML documents at
runtime, it will use the recursion specifications you entered here.</p>
<p class="subtitle_b16">Related Topics</p>
<ul>
  <li><a href="DesignerGettingStarted.htm" class="medium">Getting
Started with Designer</a> </li>
</ul>
<hr>
<p class="copyright">See the LEGAL.txt file distributed with this work
for information regarding copyright ownership and licensing.</p>
</body>
</html>
