/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package org.teiid.query.parser;

public class SQLParserTokenManager implements SQLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active4 & 0x100000000000L) != 0L)
            return 1;
         if ((active4 & 0x800000000000L) != 0L)
            return 39;
         if ((active4 & 0x800000000000000L) != 0L)
            return 48;
         if ((active2 & 0x1fc000L) != 0L || (active3 & 0x78000000000000L) != 0L)
         {
            jjmatchedKind = 287;
            return 49;
         }
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffe03fffL) != 0L || (active3 & 0xff87ffffffffffffL) != 0L || (active4 & 0x3fffffffL) != 0L)
         {
            jjmatchedKind = 287;
            return 50;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffdfcfffffef700L) != 0L || (active1 & 0xf000dfffffffffffL) != 0L || (active2 & 0xffffffffe650ffffL) != 0L || (active3 & 0xffffdf9fffffefffL) != 0L || (active4 & 0x3fffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 1;
            }
            return 50;
         }
         if ((active0 & 0x2030000010800L) != 0L || (active1 & 0xfff200000000000L) != 0L || (active2 & 0x19af0000L) != 0L || (active3 & 0x206000001000L) != 0L)
            return 50;
         return -1;
      case 2:
         if ((active0 & 0xfffdfc937efeff00L) != 0L || (active1 & 0xf87edddcffdff6ffL) != 0L || (active2 & 0x77f3fffff7157fffL) != 0L || (active3 & 0x3fffdee7ffffeff8L) != 0L || (active4 & 0x3ffe0000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 2;
            }
            return 50;
         }
         if ((active0 & 0x26c81010000L) != 0L || (active1 & 0x380022300200900L) != 0L || (active2 & 0x880c000000488000L) != 0L || (active3 & 0xc000211800000007L) != 0L || (active4 & 0x1ffffL) != 0L)
            return 50;
         return -1;
      case 3:
         if ((active0 & 0xff917c9211dd7700L) != 0L || (active1 & 0xc9fec5d2f9c39effL) != 0L || (active2 & 0x37f3ffff74017fedL) != 0L || (active3 & 0xffffcee8d3eee1ffL) != 0L || (active4 & 0x3fffffffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 3;
            }
            return 50;
         }
         if ((active0 & 0x6c80016e228800L) != 0L || (active1 & 0x3200180c061c6000L) != 0L || (active2 & 0x4008000083140012L) != 0L || (active3 & 0x10072c110e00L) != 0L)
            return 50;
         return -1;
      case 4:
         if ((active0 & 0xfe586c0219cd5700L) != 0L || (active1 & 0x49e2c4529d83debfL) != 0L || (active2 & 0x37f37e7f44015e61L) != 0L || (active3 & 0xefce4c6b8a2ced77L) != 0L || (active4 & 0x3ffff7ffL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 4;
            }
            return 50;
         }
         if ((active0 & 0x181109000102000L) != 0L || (active1 & 0x801c018060400040L) != 0L || (active2 & 0x81803000218cL) != 0L || (active3 & 0x1031828051c20088L) != 0L || (active4 & 0x800L) != 0L)
            return 50;
         return -1;
      case 5:
         if ((active0 & 0xf250280209815600L) != 0L || (active1 & 0x49a2c0120c03ce2fL) != 0L || (active2 & 0x36110e7f00014861L) != 0L || (active3 & 0xafcdcc6a0a08ed07L) != 0L || (active4 & 0x1ffff7ffL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 5;
            }
            return 50;
         }
         if ((active0 & 0xc084400104c0100L) != 0L || (active1 & 0x40044091801090L) != 0L || (active2 & 0x1e2700044001600L) != 0L || (active3 & 0x4002000181240070L) != 0L || (active4 & 0x20000000L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0xe050080008884000L) != 0L || (active1 & 0x49a2c0100803c22fL) != 0L || (active2 & 0x26110e4f00000840L) != 0L || (active3 & 0x8f0d806808006d47L) != 0L || (active4 & 0xfff77fdL) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 6;
            return 50;
         }
         if ((active0 & 0x1200200201011600L) != 0L || (active1 & 0x204000c00L) != 0L || (active2 & 0x1000203000014021L) != 0L || (active3 & 0x20c04c0202088000L) != 0L || (active4 & 0x10008002L) != 0L)
            return 50;
         return -1;
      case 7:
         if ((active0 & 0xa040080008880000L) != 0L || (active1 & 0x8a280000001820fL) != 0L || (active2 & 0x6100e4e00000040L) != 0L || (active3 & 0x8c01806000004d45L) != 0L || (active4 & 0xffd23fdL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 7;
            }
            return 50;
         }
         if ((active0 & 0x4010000000004000L) != 0L || (active1 & 0x4100401008024020L) != 0L || (active2 & 0x2001000100000800L) != 0L || (active3 & 0x30c000808002002L) != 0L || (active4 & 0x25400L) != 0L)
            return 50;
         return -1;
      case 8:
         if ((active0 & 0x40000008000000L) != 0L || (active1 & 0x882800000000000L) != 0L || (active2 & 0x210024e00000000L) != 0L || (active3 & 0x1804000004100L) != 0L || (active4 & 0x38400c5L) != 0L)
            return 50;
         if ((active0 & 0xa000080000880000L) != 0L || (active1 & 0x2000000001820fL) != 0L || (active2 & 0x4000c0000000040L) != 0L || (active3 & 0x8d00002000000c45L) != 0L || (active4 & 0xc792338L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 8;
            }
            return 50;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000080000000000L) != 0L || (active1 & 0x2000000000800fL) != 0L || (active2 & 0x400080000000000L) != 0L || (active3 & 0x8d01000000000c41L) != 0L || (active4 & 0xf792210L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 9;
            return 50;
         }
         if ((active0 & 0x2000000000880000L) != 0L || (active1 & 0x10200L) != 0L || (active2 & 0x40000000040L) != 0L || (active3 & 0x2000000004L) != 0L || (active4 & 0x128L) != 0L)
            return 50;
         return -1;
      case 10:
         if ((active0 & 0x8000080000000000L) != 0L || (active1 & 0x800fL) != 0L || (active2 & 0x400000000000000L) != 0L || (active3 & 0x8501000000000c01L) != 0L || (active4 & 0x3782200L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 10;
            return 50;
         }
         if ((active1 & 0x20000000000000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0x800000000000040L) != 0L || (active4 & 0xc010010L) != 0L)
            return 50;
         return -1;
      case 11:
         if ((active0 & 0x8000080000000000L) != 0L || (active1 & 0x8000L) != 0L || (active3 & 0x8001000000000c00L) != 0L || (active4 & 0x3780200L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 11;
            }
            return 50;
         }
         if ((active1 & 0xfL) != 0L || (active2 & 0x400000000000000L) != 0L || (active3 & 0x500000000000001L) != 0L || (active4 & 0x2000L) != 0L)
            return 50;
         return -1;
      case 12:
         if ((active1 & 0x4L) != 0L || (active3 & 0x1000000000800L) != 0L || (active4 & 0x1080000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 287;
               jjmatchedPos = 12;
            }
            return 50;
         }
         if ((active0 & 0x8000080000000000L) != 0L || (active1 & 0x8000L) != 0L || (active3 & 0x8000000000000400L) != 0L || (active4 & 0x2700200L) != 0L)
            return 50;
         return -1;
      case 13:
         if ((active1 & 0x4L) != 0L || (active3 & 0x800L) != 0L || (active4 & 0x600000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 13;
            return 50;
         }
         if ((active3 & 0x1000000000000L) != 0L || (active4 & 0x1080000L) != 0L)
            return 50;
         return -1;
      case 14:
         if ((active3 & 0x800L) != 0L)
            return 50;
         if ((active1 & 0x4L) != 0L || (active4 & 0x600000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 14;
            return 50;
         }
         return -1;
      case 15:
         if ((active1 & 0x4L) != 0L || (active4 & 0x600000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 15;
            return 50;
         }
         return -1;
      case 16:
         if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 16;
            return 50;
         }
         if ((active1 & 0x4L) != 0L || (active4 & 0x400000L) != 0L)
            return 50;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000L);
      case 36:
         return jjStopAtPos(0, 317);
      case 40:
         return jjStopAtPos(0, 301);
      case 41:
         return jjStopAtPos(0, 302);
      case 42:
         return jjStopAtPos(0, 312);
      case 43:
         return jjStopAtPos(0, 314);
      case 44:
         return jjStopAtPos(0, 299);
      case 45:
         return jjStartNfaWithStates_0(0, 315, 48);
      case 46:
         return jjStartNfaWithStates_0(0, 300, 1);
      case 47:
         jjmatchedKind = 313;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 318);
      case 60:
         jjmatchedKind = 308;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x24000000000000L);
      case 61:
         return jjStopAtPos(0, 305);
      case 62:
         jjmatchedKind = 310;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000000L);
      case 63:
         return jjStopAtPos(0, 316);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xffc00000000L, 0x0L, 0x0L, 0x7800000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3f000208c0c00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfffc000340008000L, 0xffL, 0x0L, 0x8000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3400000L, 0x7ff00L, 0x0L, 0x70000000000L, 0x1ffe0000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff80000L, 0x0L, 0x80000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x1fe0000000L, 0x0L, 0x100000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000000L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0000000000L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0xfffe00000000000L, 0x0L, 0x200000000000L, 0x20000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0xe000000000000000L, 0x1fL, 0x1c00000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fe0L, 0x6000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fc000L, 0x78000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x1ffe00000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7e00000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0xfff8000000000L, 0x80000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x6100L, 0x0L, 0xfff0000000000000L, 0x70000000000007fL, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc001000L, 0x0L, 0x0L, 0x180000000001ff80L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7e0000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L, 0x2000000003800000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fc000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L, 0xc000000000000000L, 0x1ffffL);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 303, 39);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000000L);
      case 125:
         return jjStopAtPos(0, 304);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active4 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 307);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 309);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 311);
         break;
      case 62:
         if ((active4 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 306);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3c000102000200L, active1, 0xc000060020080100L, active2, 0x100086000040e0L, active3, 0x2008400001800080L, active4, 0x20000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0x30000000000000L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x400000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x300001200000L, active1, 0x200000204000fe00L, active2, 0xfc07f0000008301L, active3, 0x82030400000100L, active4, 0L);
      case 70:
      case 102:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 109, 50);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 149, 50);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000a000L, active1, 0L, active2, 0L, active3, 0x5c000200L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000c8c1000L, active1, 0x80030000L, active2, 0x1000800000000406L, active3, 0x3a2000c00L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001860100000L, active1, 0x4000100000L, active2, 0x400000L, active3, 0x80800000000L, active4, 0x1ffc0000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80004000L, active1, 0x800000000000L, active2, 0L, active3, 0xc000000000000000L, active4, 0x2001ffffL);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000010000L, active1, 0x3fe000000200000L, active2, 0x1000000L, active3, 0x2000000e0000L, active4, 0L);
      case 79:
      case 111:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 204, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0xfe00800200420400L, active1, 0x1000180300000000L, active2, 0x400f0000000d3818L, active3, 0x1800000000000L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000006000000L, active3, 0x100000000200000L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x7L, active4, 0L);
      case 82:
      case 114:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1008000000000L, active1, 0x18400440070L, active2, 0x7810000000L, active3, 0x180010100001e000L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x800000000800000L, active2, 0L, active3, 0x6000500000L, active4, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000100L, active1, 0L, active2, 0L, active3, 0x18L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x180000008fL, active2, 0x60100000L, active3, 0x444000000000000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x180000000L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1f000000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0x200048000000060L, active4, 0L);
      case 124:
         if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 319);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000020c000L, active1, 0x8000000200L, active2, 0x40010000000001L, active3, 0x800000400006018L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000080L, active4, 0L);
      case 67:
      case 99:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 50);
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x1880800L, active2, 0x80020000010008L, active3, 0x1808000000000L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 50);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 50);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 50);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 150, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0x10001800L, active3, 0x200000L, active4, 0L);
      case 69:
      case 101:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 228, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x81000000000000L, active1, 0x400006000010L, active2, 0x2000001982000000L, active3, 0x110018201c100200L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000400L, active2, 0xc0000000000L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000008c0000L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000010000020L, active2, 0x2000000000L, active3, 0x40468000L, active4, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x62L, active3, 0x80000L, active4, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x60c000000000000L, active1, 0x808a0001000L, active2, 0x103000001100000L, active3, 0xc0a4000801800007L, active4, 0x1ffffL);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000c000000L, active1, 0x800000000000L, active2, 0x5000000000000004L, active3, 0x242000000000d00L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000400200021000L, active1, 0x4004001000000000L, active2, 0x200008000042400L, active3, 0x40080000000L, active4, 0x40000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040060102400L, active1, 0x810014400040040L, active2, 0x4000000010L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0x20080000L);
      case 82:
      case 114:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008000000300L, active1, 0x800000020040008fL, active2, 0x20000600000100L, active3, 0x2000020002000000L, active4, 0L);
      case 83:
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000100000000L, active1, 0x60000000136000L, active2, 0x400000000000000L, active3, 0x60L, active4, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 50);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 147, 50);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 187, 50);
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xa81002010800L, active1, 0x380000048008000L, active2, 0x300064004280L, active3, 0x8400320000000L, active4, 0x20000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x100000000000L, active2, 0L, active3, 0x10000L, active4, 0xff00000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0x10400000000000L, active3, 0L, active4, 0x10000000L);
      case 87:
      case 119:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 50);
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 50);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1408000100000L, active1, 0x800410L, active2, 0x200010008L, active3, 0xd011840000200000L, active4, 0x10020000L);
      case 66:
      case 98:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 50);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x4000000000L, active2, 0L, active3, 0x2000000000000L, active4, 0x1L);
      case 67:
      case 99:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x90000000000200L, active1, 0x1044014000L, active2, 0x2000004800000080L, active3, 0x100000000000000L, active4, 0xeL);
      case 68:
      case 100:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0x10000000001L, active3, 0x80000000L, active4, 0x10L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 50);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 50);
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 50);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 50);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 50);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 50);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 190, 50);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 208, 50);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 236, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x1018010000L, active1, 0x1e4800009009000L, active2, 0x1100c0030000060L, active3, 0x2c0420000000c01L, active4, 0x40060L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L);
      case 71:
      case 103:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x8000000100L, active3, 0x8000L, active4, 0L);
      case 72:
      case 104:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 50);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 50);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0x800000000200L, active3, 0x300000000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000010c0100L, active1, 0x2040200000000L, active2, 0x1000000004000804L, active3, 0x8000000002000L, active4, 0x100L);
      case 76:
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 50);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 50);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x208000000004400L, active1, 0x800000000000a00L, active2, 0x3000000000000L, active3, 0x8040000080L, active4, 0L);
      case 77:
      case 109:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x800040000000000L, active1, 0L, active2, 0x2000000000L, active3, 0x400084000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 50);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 153, 50);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 201, 50);
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x408000000000L, active2, 0L, active3, 0x800002008484000L, active4, 0x200L);
      case 79:
      case 111:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0xa0400000000000L, active3, 0x20000800020000L, active4, 0x20000000L);
      case 80:
      case 112:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 50);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1040000000L, active3, 0x100L, active4, 0xc00L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0x1000L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 50);
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 212, 50);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 226, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x8040000000002000L, active1, 0xfL, active2, 0x40000100000000L, active3, 0x10000008L, active4, 0xff80000L);
      case 83:
      case 115:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 179, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x2100000000000000L, active1, 0x300000c0L, active2, 0x600000000000000L, active3, 0x2L, active4, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 50);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x80020020L, active2, 0x400002000L, active3, 0x4000002000070L, active4, 0xc000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x18010000000000L, active2, 0x320000005400L, active3, 0x1800000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0L);
      case 89:
      case 121:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x250000000000000L, active1, 0x800004000000800L, active2, 0x3000000000L, active3, 0x80000000000004L, active4, 0x14602L);
      case 66:
      case 98:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 245, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x2000000000000L, active2, 0x140000000010000L, active3, 0x800000000L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0x20L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 50);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 50);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 50);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 136, 50);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 167, 50);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 50);
         else if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 50);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 222, 50);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 231, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x9008200200800400L, active1, 0x28000002fL, active2, 0x4000000000L, active3, 0x2084009000060L, active4, 0x8a000L);
      case 70:
      case 102:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 233, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 214, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0x4000000000008000L, active4, 0L);
      case 72:
      case 104:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 50);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 50);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 267, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x4800040000001000L, active1, 0x20000L, active2, 0x2600000c00000001L, active3, 0x2104000100000010L, active4, 0x1L);
      case 75:
      case 107:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 50);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x404000L, active1, 0x200L, active2, 0x1020000100001000L, active3, 0x1800000002000L, active4, 0x1ff20020L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000001000000L, active1, 0L, active2, 0x200000000L, active3, 0x40000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 50);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 209, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0100L, active1, 0x20040000000000L, active2, 0x80000000000040L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x10080L, active2, 0x4000200L, active3, 0x8000280080100L, active4, 0x9cL);
      case 80:
      case 112:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 50);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 50);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 50);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 50);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 50);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 244, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x1c000000800c000L, active2, 0x3e0000004000L, active3, 0x40400000000000L, active4, 0x20000000L);
      case 83:
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 50);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 168, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0x800002000004000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 50);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 50);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 50);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 50);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 50);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 50);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 175, 50);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 195, 50);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 252, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x401010001010L, active2, 0x400L, active3, 0x8200000000200002L, active4, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000004000400L, active2, 0x2000040000000L, active3, 0x400000002040000L, active4, 0x1000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0x40L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 50);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000600L, active1, 0x4002000000000000L, active2, 0x1001000100004000L, active3, 0x400802000002L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000L);
      case 67:
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 50);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 196, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000000800000L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0x740010L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 50);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 50);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 50);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 50);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 50);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 50);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 138, 50);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 50);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 50);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 210, 50);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 213, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000010000L, active1, 0L, active2, 0xc0200000020L, active3, 0x8000L, active4, 0x1120L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x100000000000000L, active4, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 50);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 50);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 254, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0xc01000004000L, active2, 0x800L, active3, 0x40042000002000L, active4, 0x20040L);
      case 76:
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 50);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 181, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0xc00000000004000L, active4, 0x10000L);
      case 77:
      case 109:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0x40L, active4, 0x208L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 50);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 50);
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 224, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000001000L, active1, 0x803000fL, active2, 0x200000000001L, active3, 0x2008080000000000L, active4, 0x5L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0x410000000000040L, active3, 0xc00L, active4, 0L);
      case 80:
      case 112:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 177, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3800000L);
      case 82:
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 50);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 50);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 241, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000080200000000L, active1, 0x820L, active2, 0x3000000000L, active3, 0x200000000000104L, active4, 0x2480L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 50);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 216, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0xa0000000000000L, active2, 0x20800000000L, active3, 0x84000000000000L, active4, 0xc000002L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 50);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 50);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 50);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 50);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 50);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 184, 50);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 285, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000008080000L, active1, 0x800000004000000L, active2, 0x200000400000000L, active3, 0x8001804000000000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x10000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x8000000L, active4, 0x80000L);
      case 87:
      case 119:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 223, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000008000000L, active1, 0x100800008000000L, active2, 0L, active3, 0x808000000004100L, active4, 0x3800001L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 234, 50);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 246, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20200L, active2, 0x1000000000000L, active3, 0L, active4, 0x4000004L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 50);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 50);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 50);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 144, 50);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 50);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 247, 50);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 284, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000080000L, active1, 0x80000000000000L, active2, 0x800L, active3, 0x4000008000001L, active4, 0x8000280L);
      case 71:
      case 103:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 128, 50);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 253, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000800000L, active1, 0x820000000008020L, active2, 0x2210020c00000000L, active3, 0x301800000000000L, active4, 0x92000L);
      case 76:
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 50);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 50);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 217, 50);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 238, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x28L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 50);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 50);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 50);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 211, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0x10000L, active2, 0x4000c0000000000L, active3, 0x2c04L, active4, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0x740000L);
      case 80:
      case 112:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 133, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 50);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 50);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 188, 50);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 207, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000004000000000L, active4, 0x1100L);
      case 83:
      case 115:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 173, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x440L);
      case 84:
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 50);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 50);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 50);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 50);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 225, 50);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 235, 50);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 257, 50);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 271, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x240000000000fL, active2, 0x200000040L, active3, 0x400002800000002L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0x10L);
      case 89:
      case 121:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 165, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xfL, active2, 0x400000000000000L, active3, 0L, active4, 0L);
      case 65:
      case 97:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0x2104L);
      case 67:
      case 99:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 249, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0xc0000000000L, active3, 0x100000000000000L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0x10000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 50);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 50);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 126, 50);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 193, 50);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 227, 50);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 266, 50);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 270, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0x10000L, active2, 0x200000000L, active3, 0xc00L, active4, 0x28L);
      case 71:
      case 103:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 205, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x8400006000000004L, active4, 0L);
      case 75:
      case 107:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 176, 50);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 273, 50);
         break;
      case 76:
      case 108:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 50);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 50);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 243, 50);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8800000L, active1, 0L, active2, 0L, active3, 0x1800000000000L, active4, 0x700010L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x802000000000000L, active2, 0xc00000000L, active3, 0L, active4, 0x80000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0x40000L);
      case 82:
      case 114:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 219, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0x100L, active4, 0x8000001L);
      case 83:
      case 115:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 139, 50);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 160, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x280L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 50);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 50);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 242, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20800000000000L, active2, 0L, active3, 0x800000000004000L, active4, 0x3800040L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200020000000000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 50);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 268, 50);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 67:
      case 99:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 230, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 50);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 166, 50);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 169, 50);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 185, 50);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 206, 50);
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0L, active2, 0x40000000040L, active3, 0x1000000000000L, active4, 0x4000010L);
      case 72:
      case 104:
         if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000008000L, active2, 0x80000000000L, active3, 0x800000000000000L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0x2000L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 50);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 162, 50);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 163, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0xa000000000000000L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0x28L);
      case 80:
      case 112:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x700200L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 50);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 50);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 161, 50);
         break;
      case 83:
      case 115:
         if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 262, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 50);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 180, 50);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 258, 50);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 263, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x206L, active2, 0L, active3, 0x100000000000001L, active4, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L, active2, 0x400000000000000L, active3, 0L, active4, 0x80000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0x8000000L);
      case 89:
      case 121:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 200, 50);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 256, 50);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 274, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 50);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 229, 50);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 264, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0x8000000L);
      case 71:
      case 103:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 194, 50);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6L, active2, 0L, active3, 0x400000000000001L, active4, 0x2000L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x700000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x2000000L);
      case 80:
      case 112:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 134, 50);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 50);
         break;
      case 83:
      case 115:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 170, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8008L, active2, 0x400000000000000L, active3, 0x1000000000000L, active4, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 50);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 50);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 259, 50);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 261, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80200L);
      case 69:
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 117, 50);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 272, 50);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 282, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L, active2, 0x400000000000000L, active3, 0L, active4, 0x700000L);
      case 71:
      case 103:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 171, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000080000000000L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x6L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 251, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x401L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 82:
      case 114:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 198, 50);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 283, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L);
      case 84:
      case 116:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 260, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8001L, active2, 0L, active3, 0x8001000000000000L, active4, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 64, 50);
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 248, 50);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(11, 269, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0x8000000000000000L, active4, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 78:
      case 110:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 192, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L);
      case 82:
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 50);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 186, 50);
         break;
      case 84:
      case 116:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 250, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x700000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, active4, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 79, 50);
         break;
      case 69:
      case 101:
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x600000L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 63, 50);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x1000000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 43, 50);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x80000L);
      case 82:
      case 114:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 202, 50);
         break;
      case 83:
      case 115:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 255, 50);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 265, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x800L, active4, 0L);
      case 89:
      case 121:
         if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 281, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L, active3, active4, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(13, 280, 50);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x400000L);
      case 80:
      case 112:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 240, 50);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active1, 0x4L, active3, 0x800L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x200000L);
      case 89:
      case 121:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 275, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L, active3, active4, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x4L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 203, 50);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L, active3, active4, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L, 0L, active4, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0x200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0x400000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0x4L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L, 0L, active4, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, active4, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(16, 66, 50);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0x200000L);
      case 89:
      case 121:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(16, 278, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, active4, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(17, 277, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffffffffffffcL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0xfffffffffffc0000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 294)
                        kind = 294;
                     jjCheckNAddStates(5, 7);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 11);
                  else if (curChar == 35)
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddStates(12, 15);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 0);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 294)
                        kind = 294;
                     jjCheckNAdd(45);
                  }
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(4);
                  break;
               case 6:
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 8:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 10:
                  if (curChar == 39 && kind > 296)
                     kind = 296;
                  break;
               case 11:
                  if (curChar != 35)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddStates(12, 15);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 46)
                     jjAddStates(0, 2);
                  break;
               case 14:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 18:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAdd(13);
                  break;
               case 21:
                  if (curChar == 42 && kind > 286)
                     kind = 286;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 24:
                  if (curChar != 35)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 27:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 28:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 30:
                  if (curChar != 34)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAdd(23);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 11);
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(25, 27);
                  break;
               case 33:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddStates(28, 30);
                  break;
               case 36:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 44:
                  if (curChar == 45)
                     jjCheckNAddStates(5, 7);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 0);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjCheckNAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 5:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddStates(12, 15);
                  }
                  else if (curChar == 123)
                     jjAddStates(31, 34);
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 39:
                  if ((0x400000004L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                  }
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 290)
                        kind = 290;
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 291)
                        kind = 291;
                  }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 9:
                  jjAddStates(16, 18);
                  break;
               case 11:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddStates(12, 15);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 19:
                  jjCheckNAddStates(19, 21);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 29:
                  jjCheckNAddStates(22, 24);
                  break;
               case 34:
                  jjCheckNAddStates(25, 27);
                  break;
               case 37:
                  jjCheckNAddStates(28, 30);
                  break;
               case 38:
                  if (curChar == 123)
                     jjAddStates(31, 34);
                  break;
               case 40:
                  if ((0x10000000100000L & l) != 0L && kind > 291)
                     kind = 291;
                  break;
               case 41:
                  if ((0x8000000080000L & l) != 0L && kind > 292)
                     kind = 292;
                  break;
               case 42:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x400000004L & l) != 0L && kind > 293)
                     kind = 293;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddStates(12, 15);
                  break;
               case 49:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 287)
                        kind = 287;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 18);
                  break;
               case 12:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
               case 15:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  break;
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 287)
                     kind = 287;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(25, 27);
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(28, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   14, 16, 21, 24, 26, 45, 46, 0, 33, 34, 36, 37, 12, 22, 23, 13, 
   8, 9, 10, 18, 19, 20, 28, 29, 30, 33, 34, 20, 36, 37, 30, 39, 
   40, 42, 43, 3, 4, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec6[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\54", "\56", "\50", "\51", "\173", "\175", 
"\75", "\74\76", "\41\75", "\74", "\74\75", "\76", "\76\75", "\52", "\57", "\53", 
"\55", "\77", "\44", "\73", "\174\174", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xfffff9fcffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x5eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xa0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[48];
private final int[] jjstateSet = new int[96];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SQLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SQLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
