/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package org.teiid.query.parser;

import java.math.BigInteger;
import java.util.*;
import org.teiid.core.types.*;
import org.teiid.query.QueryPlugin;
import org.teiid.query.sql.LanguageObject;
import org.teiid.query.sql.lang.*;
import org.teiid.query.sql.proc.*;
import org.teiid.query.sql.symbol.*;
import org.teiid.metadata.*;
import org.teiid.metadata.BaseColumn.NullType;

/** 
 * <p>The SQLParser is a JavaCC-generated parser that reads a SQL string and produces a 
 * Query object.  The SQLParser.java file is generated by JavaCC from the SQLParser.jj
 * file.  <B>WARNING:</B> DO NOT MODIFY the SQLParser.java file as it will be 
 * regenerated from the .jj file and your changes will be lost!</p>
 */
@SuppressWarnings("nls")
public class SQLParser extends SQLParserUtil implements SQLParserConstants {

//----------------------------------------------------
//----------------------------------------------------
  final public String stringVal() throws ParseException {
        Token t = null;
    t = jj_consume_token(STRINGVAL);
                {if (true) return normalizeStringLiteral(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String id() throws ParseException {
        Token t = null;
    t = jj_consume_token(ID);
                {if (true) return normalizeId(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Command designerCommand(ParseInfo info) throws ParseException {
        Command command = null;
    if (jj_2_1(2)) {
      command = updateProcedure(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case DELETE:
      case DROP:
      case EXEC:
      case EXECUTE:
      case INSERT:
      case SELECT:
      case TABLE:
      case UPDATE:
      case WITH:
      case LPAREN:
        command = userCommand(info);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
                {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

/** 
 * Parse any of several command types - this is the main parser entry point. 
 * @param info instructions to parse the command
 * @return Parsed command
 * @throws ParseException if parsing failed
 */
  final public Command command(ParseInfo info) throws ParseException {
        Command command = null;
    if (jj_2_2(2)) {
      command = createUpdateProcedure(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case DELETE:
      case DROP:
      case EXEC:
      case EXECUTE:
      case INSERT:
      case SELECT:
      case TABLE:
      case UPDATE:
      case WITH:
      case LPAREN:
        command = userCommand(info);
        break;
      case LBRACE:
        command = callableStatement(info);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(0);
                {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

  final public Command updateProcedure(ParseInfo info) throws ParseException {
        Command command = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      command = createUpdateProcedure(info);
      break;
    case FOR:
      command = triggerAction(info);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
                {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

  final public TriggerAction triggerAction(ParseInfo info) throws ParseException {
        Block b = null;
    jj_consume_token(FOR);
    jj_consume_token(EACH);
    jj_consume_token(ROW);
    b = block(info);
                {if (true) return new TriggerAction(b);}
    throw new Error("Missing return statement in function");
  }

  final public Command userCommand(ParseInfo info) throws ParseException {
        Command command = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case TABLE:
    case WITH:
    case LPAREN:
      command = queryExpression(info);
      break;
    case CALL:
    case EXEC:
    case EXECUTE:
      command = storedProcedure(info, new StoredProcedure());
      break;
    case INSERT:
      command = insert(info);
      break;
    case UPDATE:
      command = update(info);
      break;
    case DELETE:
      command = delete(info);
      break;
    case DROP:
      command = dropTable(info);
      break;
    case CREATE:
      command = createTempTable(info);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return command;}
    throw new Error("Missing return statement in function");
  }

/** 
 * Parse drop table command. 
 * @param info instructions to parse the command
 * @return Parsed command
 * @throws ParseException if parsing failed
 */
  final public Command dropTable(ParseInfo info) throws ParseException {
        Drop drop = new Drop();
        String table = null;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    table = id();
                drop.setTable(new GroupSymbol(table));
                {if (true) return drop;}
    throw new Error("Missing return statement in function");
  }

/** 
 * Parse create temp table command. 
 * @param info instructions to parse the command
 * @return Parsed command
 * @throws ParseException if parsing failed
 */
  final public Command createTempTable(ParseInfo info) throws ParseException {
        Create create = new Create();
        String table = null;
        String pkId = null;
        Column col = null;
    jj_consume_token(CREATE);
    jj_consume_token(LOCAL);
    jj_consume_token(TEMPORARY);
    jj_consume_token(TABLE);
    table = id();
    jj_consume_token(LPAREN);
                create.setTable(new GroupSymbol(table));
    col = tableElement(info);
      create.getColumns().add(col);
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(COMMA);
      col = tableElement(info);
        create.getColumns().add(col);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      jj_consume_token(PRIMARY);
      nonReserved("KEY");
      jj_consume_token(LPAREN);
      pkId = id();
            create.getPrimaryKey().add(new ElementSymbol(validateElementName(pkId)));
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        pkId = id();
             create.getPrimaryKey().add(new ElementSymbol(validateElementName(pkId)));
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                {if (true) return create;}
    throw new Error("Missing return statement in function");
  }

  final public Column tableElement(ParseInfo info) throws ParseException {
        String element = null;
        String type = null;
        boolean autoIncrement = false;
        boolean notNull = false;
    element = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case OBJECT:
    case BLOB:
    case CLOB:
    case XML:
      type = dataTypeString();
      break;
    case ID:
      nonReserved("SERIAL");
            type = "INTEGER";
            autoIncrement = true;
            notNull = true;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
                         notNull = true;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
            Column c = new Column();
            c.setName(validateElementName(element));
            c.setRuntimeType(type);
            c.setAutoIncremented(autoIncrement);
            c.setNullType(notNull?NullType.No_Nulls:NullType.Nullable);
            {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse error statement
 * @throws ParseException if parsing failed
 */
  final public RaiseErrorStatement errorStatement(ParseInfo info) throws ParseException {
    Expression errMsg = null;
    jj_consume_token(ERROR);
    errMsg = expression(info);
        RaiseErrorStatement errStmt = new RaiseErrorStatement(errMsg);
        {if (true) return errStmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse statement
 * @throws ParseException if parsing failed
 */
  final public Statement statement(ParseInfo info) throws ParseException {
    Statement stmt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      stmt = ifStatement(info);
      break;
    case LOOP:
      stmt = loopStatement(info);
      break;
    case WHILE:
      stmt = whileStatement(info);
      break;
    case BREAK:
    case CALL:
    case CONTINUE:
    case CREATE:
    case DECLARE:
    case DELETE:
    case DROP:
    case ERROR:
    case EXEC:
    case EXECUTE:
    case INSERT:
    case SELECT:
    case TABLE:
    case UPDATE:
    case WITH:
    case ID:
    case LPAREN:
      stmt = delimitedStatement(info);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public Statement delimitedStatement(ParseInfo info) throws ParseException {
    Statement stmt = null;
    if (jj_2_4(3)) {
      stmt = assignStatement(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CREATE:
      case DELETE:
      case DROP:
      case EXEC:
      case EXECUTE:
      case INSERT:
      case SELECT:
      case TABLE:
      case UPDATE:
      case WITH:
      case ID:
      case LPAREN:
        stmt = sqlStatement(info);
        break;
      case ERROR:
        stmt = errorStatement(info);
        break;
      case DECLARE:
        stmt = declareStatement(info);
        break;
      case CONTINUE:
        stmt = continueStatement(info);
        break;
      case BREAK:
        stmt = breakStatement(info);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
             {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse block
 * @throws ParseException
 */
  final public Block block(ParseInfo info) throws ParseException {
    Statement stmt = null;
    Block block = new Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CALL:
    case CONTINUE:
    case CREATE:
    case DECLARE:
    case DELETE:
    case DROP:
    case ERROR:
    case EXEC:
    case EXECUTE:
    case IF:
    case INSERT:
    case LOOP:
    case SELECT:
    case TABLE:
    case UPDATE:
    case WITH:
    case WHILE:
    case ID:
    case LPAREN:
      stmt = statement(info);
                block.addStatement(stmt);
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CALL:
        case CONTINUE:
        case CREATE:
        case DECLARE:
        case DELETE:
        case DROP:
        case ERROR:
        case EXEC:
        case EXECUTE:
        case IF:
        case INSERT:
        case LOOP:
        case SELECT:
        case TABLE:
        case UPDATE:
        case WITH:
        case WHILE:
        case ID:
        case LPAREN:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        stmt = statement(info);
                    block.addStatement(stmt);
      }
      jj_consume_token(END);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse break statement 
 * @throws ParseException if parsing failed
 */
  final public BreakStatement breakStatement(ParseInfo info) throws ParseException {
    BreakStatement breakStmt = null;
    jj_consume_token(BREAK);
                breakStmt = new BreakStatement();

                {if (true) return breakStmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse break statement 
 * @throws ParseException if parsing failed
 */
  final public ContinueStatement continueStatement(ParseInfo info) throws ParseException {
    ContinueStatement contStmt = null;
    jj_consume_token(CONTINUE);
                contStmt = new ContinueStatement();

                {if (true) return contStmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse while statement 
 * @throws ParseException if parsing failed
 */
  final public WhileStatement whileStatement(ParseInfo info) throws ParseException {
    WhileStatement whileStmt = null;
    Criteria criteria = null;
    Block block = null;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    criteria = criteria(info);
    jj_consume_token(RPAREN);
    block = block(info);
        whileStmt = new WhileStatement(criteria, block);

        {if (true) return whileStmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse loop statement 
 * @throws ParseException if parsing failed
 */
  final public LoopStatement loopStatement(ParseInfo info) throws ParseException {
    LoopStatement loopStmt = null;
    String cursor = null;
    QueryCommand query = null;
    Block block = null;
    jj_consume_token(LOOP);
    jj_consume_token(ON);
    jj_consume_token(LPAREN);
    query = queryExpression(info);
    jj_consume_token(RPAREN);
    jj_consume_token(AS);
    cursor = id();
    block = block(info);
        loopStmt = new LoopStatement(block, query, cursor);

        {if (true) return loopStmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse if statement 
 * @throws ParseException if parsing failed
 */
  final public IfStatement ifStatement(ParseInfo info) throws ParseException {
    IfStatement ifStmt = null;
    Criteria criteria = null;
    Block ifBlock = null;
    Block elseBlock = null;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    criteria = criteria(info);
    jj_consume_token(RPAREN);
    ifBlock = block(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseBlock = block(info);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
        ifStmt = new IfStatement(criteria, ifBlock);
        ifStmt.setElseBlock(elseBlock);
        {if (true) return ifStmt;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse criteria selector
 * @throws ParseException if parsing failed
 */
  final public CriteriaSelector criteriaSelector() throws ParseException {
    CriteriaSelector critSelector = new CriteriaSelector();

    String element = null;
    List elements = new ArrayList();
    Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BETWEEN:
    case IN:
    case IS:
    case LIKE:
    case EQ:
    case NE:
    case NE2:
    case LT:
    case LE:
    case GT:
    case GE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        operator = jj_consume_token(EQ);
        break;
      case NE:
        operator = jj_consume_token(NE);
        break;
      case NE2:
        operator = jj_consume_token(NE2);
        break;
      case LE:
        operator = jj_consume_token(LE);
        break;
      case GE:
        operator = jj_consume_token(GE);
        break;
      case LT:
        operator = jj_consume_token(LT);
        break;
      case GT:
        operator = jj_consume_token(GT);
        break;
      case IN:
        operator = jj_consume_token(IN);
        break;
      case LIKE:
        operator = jj_consume_token(LIKE);
        break;
      case IS:
        operator = jj_consume_token(IS);
        jj_consume_token(NULL);
        break;
      case BETWEEN:
        operator = jj_consume_token(BETWEEN);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       critSelector.setSelectorType(getOperator(operator.image));
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(CRITERIA);
    if (jj_2_5(4)) {
      jj_consume_token(ON);
      jj_consume_token(LPAREN);
      element = id();
       elements.add(new ElementSymbol(element));
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        element = id();
                elements.add(new ElementSymbol(element));
      }
      jj_consume_token(RPAREN);
       critSelector.setElements(elements);
    } else {
      ;
    }
       {if (true) return critSelector;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse has criteria
 * @throws ParseException
 */
  final public HasCriteria hasCriteria() throws ParseException {
    HasCriteria hasCrit = new HasCriteria();
    CriteriaSelector critSelector = null;
    jj_consume_token(HAS);
    critSelector = criteriaSelector();
        hasCrit.setSelector(critSelector);
        {if (true) return hasCrit;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse declare statement
 * @throws ParseException if parsing failed
 */
  final public DeclareStatement declareStatement(ParseInfo info) throws ParseException {
    DeclareStatement declStmt = null;
    String var = null;
    Constant type = null;
    ElementSymbol variableID = null;
    LanguageObject value = null;
    jj_consume_token(DECLARE);
    type = dataType();
    var = id();
        variableID = new ElementSymbol(var);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case EQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        nonReserved(":=");
        break;
      case EQ:
        jj_consume_token(EQ);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = assignStatementOperand(info);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        if (value instanceof Expression) {
                {if (true) return new DeclareStatement(variableID, (String)type.getValue(), (Expression)value);}
        }
        if (value instanceof QueryCommand) {
                {if (true) return new DeclareStatement(variableID, (String)type.getValue(), new ScalarSubquery((QueryCommand)value));}
        }
        {if (true) return new DeclareStatement(variableID, (String)type.getValue(), (Command)value);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse assignment statement
 * @throws ParseException if parsing failed
 */
  final public AssignmentStatement assignStatement(ParseInfo info) throws ParseException {
    LanguageObject value = null;
    String var = null;
    ElementSymbol elementID = null;
    var = id();
        elementID = new ElementSymbol(var);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nonReserved(":=");
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    value = assignStatementOperand(info);
        if (value instanceof Expression) {
                {if (true) return new AssignmentStatement(elementID, (Expression)value);}
        }
        if (value instanceof QueryCommand) {
                {if (true) return new AssignmentStatement(elementID, (QueryCommand)value);}
        }
        {if (true) return new AssignmentStatement(elementID, (Command)value);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse operand of assignment statement, which can be nested
 * arbitrarily deeply in parentheses.
 * @throws ParseException if parsing failed
 */
  final public LanguageObject assignStatementOperand(ParseInfo info) throws ParseException {
    LanguageObject value = null;
    if (jj_2_6(2147483647)) {
      value = insert(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE:
        //deprecated
              value = update(info);
        break;
      case DELETE:
        //deprecated
              value = delete(info);
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_7(2147483647)) {
          value = expression(info);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SELECT:
          case TABLE:
          case WITH:
          case LPAREN:
            value = queryExpression(info);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse sql statement 
 * @throws ParseException if parsing failed
 */
  final public CommandStatement sqlStatement(ParseInfo info) throws ParseException {
    CommandStatement cmdStmt = null;
    Command cmd = null;
    String var = null;
    ElementSymbol elementID = null;
    StoredProcedure storedProcedure = null;
    if (jj_2_8(2)) {
      cmd = userCommand(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXEC:
      case EXECUTE:
        cmd = dynamicCommand(info);
        break;
      case ID:
        var = id();
        storedProcedure = new StoredProcedure();
        elementID = new ElementSymbol(var);
        SPParameter parameter = new SPParameter(1, SPParameter.RETURN_VALUE, "return"); //$NON-NLS-1$
        parameter.setExpression(elementID);
            storedProcedure.setParameter(parameter);
            storedProcedure.setCalledWithReturn(true);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          nonReserved(":=");
          break;
        case EQ:
          jj_consume_token(EQ);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        cmd = storedProcedure(info, storedProcedure);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        cmdStmt = new CommandStatement(cmd);
        {if (true) return cmdStmt;}
    throw new Error("Missing return statement in function");
  }

  final public TranslateCriteria translateCriteria(ParseInfo info) throws ParseException {
    String element = null;
    Expression value = null;
    ElementSymbol leftSymbol = null;

    CriteriaSelector critSelector = null;
    TranslateCriteria transCriteria = new TranslateCriteria();

    CompareCriteria compCrit = null;

    List critList = null;
    jj_consume_token(TRANSLATE);
    critSelector = criteriaSelector();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
            critList = new ArrayList();
      jj_consume_token(LPAREN);
      element = id();
      jj_consume_token(EQ);
      value = expression(info);
            compCrit = new CompareCriteria();
            leftSymbol = new ElementSymbol(element);
            compCrit.setLeftExpression(leftSymbol);
            compCrit.setRightExpression(value);
            compCrit.setOperator(CompareCriteria.EQ);
            critList.add(compCrit);
            compCrit = null;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        element = id();
        jj_consume_token(EQ);
        value = expression(info);
            compCrit = new CompareCriteria();
            leftSymbol = new ElementSymbol(element);
            compCrit.setLeftExpression(leftSymbol);
            compCrit.setRightExpression(value);
            compCrit.setOperator(CompareCriteria.EQ);
            critList.add(compCrit);
            compCrit = null;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
        transCriteria.setSelector(critSelector);

        if ( critList != null) {
            transCriteria.setTranslations(critList);
        }

        {if (true) return transCriteria;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse create update procedure command
 * @throws ParseException if parsing failed
 */
  final public CreateUpdateProcedureCommand createUpdateProcedure(ParseInfo info) throws ParseException {
    CreateUpdateProcedureCommand updateProcCmd =
        new CreateUpdateProcedureCommand();
    Block block = null;
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
                         updateProcCmd.setUpdateProcedure(false);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPDATE:
      jj_consume_token(UPDATE);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(PROCEDURE);
    block = block(info);
        updateProcCmd.setBlock(block);
        {if (true) return updateProcCmd;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse error statement
 * @throws ParseException if parsing failed
 */
  final public DynamicCommand dynamicCommand(ParseInfo info) throws ParseException {
    Expression sql = null;
    String groupID = null;
        GroupSymbol group = null;
        int updateCount = 0;
        Token updateToken = null;
        List elements = null;
        SetClauseList using = null;
        DynamicCommand dcStmt = new DynamicCommand();
        SetClauseList setClauseList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXECUTE:
      jj_consume_token(EXECUTE);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case IMMEDIATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case IMMEDIATE:
        jj_consume_token(IMMEDIATE);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    sql = expression(info);
        dcStmt.setSql(sql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      elements = createElementsWithTypes(info);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTO:
        jj_consume_token(INTO);
        groupID = id();
         group = new GroupSymbol(groupID);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
         dcStmt.setIntoGroup(group);
         dcStmt.setAsColumns(elements);
         dcStmt.setAsClauseSet(true);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USING:
      jj_consume_token(USING);
      using = setClauseList(true, info);
             dcStmt.setUsing(using);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UPDATE:
      jj_consume_token(UPDATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGERVAL:
        updateToken = jj_consume_token(INTEGERVAL);
        updateCount = Integer.parseInt(updateToken.image);
        break;
      case STAR:
        jj_consume_token(STAR);
        updateCount = 2;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
        dcStmt.setUpdatingModelCount(updateCount);
        {if (true) return dcStmt;}
    throw new Error("Missing return statement in function");
  }

  final public SetClauseList setClauseList(boolean shortName, ParseInfo info) throws ParseException {
        SetClauseList using = new SetClauseList();
        String element = null;
    element = id();
    jj_consume_token(EQ);
        String symbolName = shortName?validateElementName(element):element;
        ElementSymbol symbol = new ElementSymbol(symbolName);
        Expression value = expression(info);
        using.addClause(symbol, value);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      element = id();
      jj_consume_token(EQ);
              symbolName = shortName?validateElementName(element):element;
          symbol = new ElementSymbol(symbolName);
          value = expression(info);
          using.addClause(symbol, value);
    }
                {if (true) return using;}
    throw new Error("Missing return statement in function");
  }

/**
 * Create elements with datatypes
 * @throws ParseException if parsing failed
 */
  final public List createElementsWithTypes(ParseInfo info) throws ParseException {
        String element = null;
        Constant type = null;
        List elements = new ArrayList();
    element = id();
    type = dataType();
            ElementSymbol symbol = new ElementSymbol(validateElementName(element));
            symbol.setType(DataTypeManager.getDataTypeClass(type.getValue().toString()));
                elements.add(symbol);
    label_7:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      element = id();
      type = dataType();
                        symbol = new ElementSymbol(validateElementName(element));
                    symbol.setType(DataTypeManager.getDataTypeClass(type.getValue().toString()));
                    elements.add(symbol);
    }
                {if (true) return elements;}
    throw new Error("Missing return statement in function");
  }

  final public StoredProcedure callableStatement(ParseInfo info) throws ParseException {
        StoredProcedure storedProcedure = new StoredProcedure();
        storedProcedure.setCallableStatement(true);
        Token call = null;
        String procName = null;
        Option option = null;
        SPParameter parameter = null;
        int parameterIndex = 1;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      jj_consume_token(QMARK);
      jj_consume_token(EQ);
           parameter = new SPParameter(parameterIndex++, SPParameter.RETURN_VALUE, "return"); //$NON-NLS-1$
           storedProcedure.setParameter(parameter);
           storedProcedure.setCalledWithReturn(true);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(CALL);
    procName = id();
                storedProcedure.setProcedureName(procName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      storedProcedure = executeUnnamedParams(info, storedProcedure, parameterIndex);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTION:
      option = option(info);
           storedProcedure.setOption(option);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
                {if (true) return storedProcedure;}
    throw new Error("Missing return statement in function");
  }

/**
 * * Parse stored query command
 * @throws ParseException if parsing failed
 */
  final public StoredProcedure storedProcedure(ParseInfo info, StoredProcedure storedProcedure) throws ParseException {
        String procName = null;
        Option option = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXEC:
      jj_consume_token(EXEC);
      break;
    case EXECUTE:
      jj_consume_token(EXECUTE);
      break;
    case CALL:
      jj_consume_token(CALL);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    procName = id();
                        storedProcedure.setProcedureName(procName);
    jj_consume_token(LPAREN);
    if (jj_2_10(2147483647)) {
      storedProcedure = executeNamedParams(info, storedProcedure);
    } else {
      storedProcedure = executeUnnamedParams(info, storedProcedure, storedProcedure.getParameters().size() + 1);
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTION:
      option = option(info);
           storedProcedure.setOption(option);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
                {if (true) return storedProcedure;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an exec statement with unnamed parameters</p>
 * @throws ParseException if parsing failed
 */
  final public StoredProcedure executeUnnamedParams(ParseInfo info, StoredProcedure storedProcedure, int parameterIndex) throws ParseException {
        SPParameter parameter = null;
    Expression value = null;
    if (jj_2_11(1)) {
      value = expression(info);
                                parameter = new SPParameter(parameterIndex++, value);
                                parameter.setParameterType(SPParameter.IN);
                                storedProcedure.setParameter(parameter);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        value = expression(info);
                                        parameter = new SPParameter(parameterIndex++, value);
                                        parameter.setParameterType(SPParameter.IN);
                                        storedProcedure.setParameter(parameter);
      }
    } else {
      ;
    }
                {if (true) return storedProcedure;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an exec statement with named parameters</p>
 * @throws ParseException if parsing failed
 */
  final public StoredProcedure executeNamedParams(ParseInfo info, StoredProcedure storedProcedure) throws ParseException {
        String name = null;
    Expression value = null;
        SPParameter parameter = null;
        int parameterIndex = 1;
                storedProcedure.setDisplayNamedParameters(true);
    name = id();
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    value = expression(info);
                        parameter = new SPParameter(parameterIndex++, value);
                        parameter.setName(name);
                        parameter.setParameterType(SPParameter.IN);
                        storedProcedure.setParameter(parameter);
                        parameter = null;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      name = id();
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      value = expression(info);
                                parameter = new SPParameter(parameterIndex++, value);
                                parameter.setName(name);
                                parameter.setParameterType(SPParameter.IN);
                                storedProcedure.setParameter(parameter);
                                parameter = null;
    }
                {if (true) return storedProcedure;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an INSERT command
 * @return Parsed insert statement
 * @throws ParseException if parsing failed
 */
  final public Insert insert(ParseInfo info) throws ParseException {
        Insert insert = new Insert();
        String group = null;
        List values = null;
        List<ElementSymbol> columns = null;
        Option option = null;
        QueryCommand query = null;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    group = id();
    if (jj_2_12(2147483647)) {
      columns = columnList(false);
          insert.setVariables(columns);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUES:
      jj_consume_token(VALUES);
      values = rowValues(info);
                    // Store each row of values
                    insert.setValues(values);
      break;
    case SELECT:
    case TABLE:
    case WITH:
    case LPAREN:
      query = queryExpression(info);
                    insert.setQueryExpression(query);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTION:
      option = option(info);
            insert.setOption(option);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
                // Store group
                insert.setGroup(new GroupSymbol(group) );

                {if (true) return insert;}
    throw new Error("Missing return statement in function");
  }

  final public List<ElementSymbol> columnList(boolean validate) throws ParseException {
        String element = null;
        List<ElementSymbol> symbols = new LinkedList<ElementSymbol>();
    jj_consume_token(LPAREN);
    element = id();
                if (validate) {
                        element = validateElementName(element);
                }
                symbols.add(new ElementSymbol(element));
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      element = id();
                        if (validate) {
                                element = validateElementName(element);
                        }
                        symbols.add(new ElementSymbol(element));
    }
    jj_consume_token(RPAREN);
                {if (true) return symbols;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse row values - this is a comma separated list of values.
 * @return List of values, never null
 * @throws ParseException if parsing failed
 */
  final public List rowValues(ParseInfo info) throws ParseException {
        List rowVals = new ArrayList();
        Expression value = null;
    jj_consume_token(LPAREN);
    value = expression(info);
        rowVals.add(value);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      value = expression(info);
            rowVals.add(value);
    }
    jj_consume_token(RPAREN);
                {if (true) return rowVals;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an UPDATE command
 * @return Parsed update statement
 * @throws ParseException if parsing failed
 */
  final public Update update(ParseInfo info) throws ParseException {
        Update update = new Update();
        String group = null;
        SetClauseList setClauseList = null;
        Criteria criteria = null;
        ElementSymbol elementID = null;
        Option option = null;
    jj_consume_token(UPDATE);
    group = id();
    jj_consume_token(SET);
    setClauseList = setClauseList(false, info);
                update.setChangeList(setClauseList);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      criteria = where(info);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTION:
      option = option(info);
           update.setOption(option);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                // Store group
                update.setGroup(new GroupSymbol( group) );

                // Store optional criteria
                if(criteria != null) {
                        update.setCriteria(criteria);
                }

                {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a DELETE command
 * @return Parsed delete statement
 * @throws ParseException if parsing failed
 */
  final public Delete delete(ParseInfo info) throws ParseException {
        String group = null;
        Criteria criteria = null;
        Delete delete = new Delete();
        Option option = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    group = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      criteria = where(info);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTION:
      option = option(info);
           delete.setOption(option);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
                delete.setGroup(new GroupSymbol(group));
                delete.setCriteria(criteria);

        {if (true) return delete;}
    throw new Error("Missing return statement in function");
  }

/**
 * Currently just a place holder to keep consistency with the spec
 */
  final public QueryCommand queryExpression(ParseInfo info) throws ParseException {
        QueryCommand query = null;
        List<WithQueryCommand> withList = null;
        WithQueryCommand withQueryCommand = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      withQueryCommand = withListElement(info);
            withList = new LinkedList<WithQueryCommand>();
            withList.add(withQueryCommand);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        withQueryCommand = withListElement(info);
            withList.add(withQueryCommand);
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    query = queryExpressionBody(info);
                query.setWith(withList);
                {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public WithQueryCommand withListElement(ParseInfo info) throws ParseException {
   String name = null;
   List<ElementSymbol> columns = null;
   QueryCommand queryExpression = null;
    name = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      columns = columnList(true);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(AS);
    jj_consume_token(LPAREN);
    queryExpression = queryExpression(info);
    jj_consume_token(RPAREN);
            {if (true) return new WithQueryCommand(new GroupSymbol(validateAlias(name)), columns, queryExpression);}
    throw new Error("Missing return statement in function");
  }

  final public QueryCommand queryExpressionBody(ParseInfo info) throws ParseException {
    QueryCommand query = null;
    QueryCommand rightQuery = null;
    boolean all = false;
    Option option = null;
        OrderBy orderby = null;
        Limit limit = null;
        SetQuery.Operation type;
    query = queryTerm(info);
    label_13:
    while (true) {
      if (jj_2_13(1)) {
        ;
      } else {
        break label_13;
      }
      if (jj_2_14(2147483647) && (getToken(2).kind != JOIN)) {
        jj_consume_token(UNION);
                                                                              type = SetQuery.Operation.UNION;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPT:
          jj_consume_token(EXCEPT);
                                                                                                                              type = SetQuery.Operation.EXCEPT;
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
      case DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
                         all = true;
          break;
        case DISTINCT:
          jj_consume_token(DISTINCT);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      rightQuery = queryTerm(info);
                        query = addQueryToSetOperation(query, rightQuery, type, all);
                all = false;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      orderby = orderby(info);
                               query.setOrderBy( orderby );
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      limit = limit(info);
                             query.setLimit( limit );
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    if (jj_2_15(2147483647)) {
      option = option(info);
                                                 query.setOption(option);
    } else {
      ;
    }
                {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public QueryCommand queryTerm(ParseInfo info) throws ParseException {
    QueryCommand query = null;
    QueryCommand rightQuery = null;
    boolean all = false;
    query = queryPrimary(info);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTERSECT:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_14;
      }
      jj_consume_token(INTERSECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
      case DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
                         all = true;
          break;
        case DISTINCT:
          jj_consume_token(DISTINCT);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      rightQuery = queryPrimary(info);
                        query = addQueryToSetOperation(query, rightQuery, SetQuery.Operation.INTERSECT, all);
                all = false;
    }
        {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public QueryCommand queryPrimary(ParseInfo info) throws ParseException {
    QueryCommand query = null;
    String name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      query = query(info);
      break;
    case TABLE:
      jj_consume_token(TABLE);
      name = id();
           Query q = new Query();
           q.setSelect(new Select(Arrays.asList(new AllSymbol())));
           q.setFrom(new From(Arrays.asList(new UnaryFromClause(new GroupSymbol(name)))));
           query = q;
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      query = queryExpressionBody(info);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a SELECT query
 * @return Parsed query
 * @throws ParseException if parsing failed
 */
  final public Query query(ParseInfo info) throws ParseException {
        Select   select         = null;
        From     from           = null;
        Into     into                   = null;
        Criteria criteria       = null;
        GroupBy  groupBy        = null;
        Criteria having         = null;
    select = select(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTO:
      into = into(info);
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      from = from(info);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        criteria = where(info);
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        groupBy = groupBy(info);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        having = having(info);
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
                // Build query from parsed pieces
                Query query = new Query();
                query.setSelect( select );
                query.setFrom( from );
                query.setInto( into );
                query.setCriteria(criteria);
                query.setGroupBy(groupBy);
                query.setHaving(having);

                {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public Into into(ParseInfo info) throws ParseException {
        String groupID = null;
        Into into = null;
    jj_consume_token(INTO);
    groupID = id();
        into = new Into(new GroupSymbol(groupID));
                {if (true) return into;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a SELECT clause.  The select must handle elements, aliased elements
 * (x AS y), group.*, and *.  It also must handle an optional DISTINCT at the
 * beginning of the select list.  It also must handle a scalar subquery expression
 * in parentheses.</p>
 * <p>Example:  "SELECT group.element, group2.element2 AS x, group3.*". </p>
 * <p>Example:  "SELECT *". </p>
 * <p>Example:  "SELECT DISTINCT a, b, c".</p>
 * <p>Example:  "SELECT a, (SELECT b FROM groupC)".</p>
 * <p>Example:  "SELECT a, (SELECT b FROM groupC) as d".</p>
 * @return Parsed select
 * @throws ParseException if parsing failed
 */
  final public Select select(ParseInfo info) throws ParseException {
        boolean isDistinct = false;             // unless DISTINCT keyword in SELECT
        SelectSymbol symbol = null;
        Select select = new Select();
        info.aggregatesAllowed = true;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      case DISTINCT:
        jj_consume_token(DISTINCT);
                              isDistinct=true;
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
                        select.addSymbol(new AllSymbol());
      break;
    default:
      jj_la1[75] = jj_gen;
      if (jj_2_16(1)) {
        symbol = selectSymbol(info);
                                                         select.addSymbol(symbol);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[74] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          symbol = selectSymbol(info);
                                                             select.addSymbol(symbol);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                info.aggregatesAllowed = false;
                select.setDistinct(isDistinct);
                {if (true) return select;}
    throw new Error("Missing return statement in function");
  }

  final public SelectSymbol selectSymbol(ParseInfo info) throws ParseException {
        SelectSymbol symbol = null;
    if (jj_2_17(1)) {
      symbol = selectExpression(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL_IN_GROUP:
        symbol = allInGroupSymbol();
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return symbol;}
    throw new Error("Missing return statement in function");
  }

  final public SingleElementSymbol selectExpression(ParseInfo info) throws ParseException {
        Expression expression = null;
    String alias = null;
    // Expression
                    expression = expression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      alias = id();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
                SingleElementSymbol es = null;
                if(expression instanceof ElementSymbol) {
                        es = (ElementSymbol) expression;
                } else {
                        String func = null;
                        if(expression instanceof AggregateSymbol) {
                        es = (AggregateSymbol)expression;
                        func = ((AggregateSymbol)expression).getAggregateFunction().name();
                        } else {
                                String functionName = generateFunctionName(info, null);
                                es = new ExpressionSymbol(functionName, expression);
                        }
                }
                if(alias != null) {
                        alias = validateAlias(alias);
                        {if (true) return new AliasSymbol(alias, es);}
                }
                {if (true) return es;}
    throw new Error("Missing return statement in function");
  }

  final public DerivedColumn derivedColumn(ParseInfo info) throws ParseException {
        Expression expression = null;
    String alias = null;
    // Expression
                    expression = expression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      alias = id();
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
                if(alias != null) {
                        alias = validateAlias(alias);
                }
                {if (true) return new DerivedColumn(alias, expression);}
    throw new Error("Missing return statement in function");
  }

  final public AllInGroupSymbol allInGroupSymbol() throws ParseException {
        Token allInGroupToken = null;
    allInGroupToken = jj_consume_token(ALL_IN_GROUP);
                {if (true) return new AllInGroupSymbol(normalizeId(allInGroupToken.image));}
    throw new Error("Missing return statement in function");
  }

  final public AggregateSymbol xmlAgg(ParseInfo info) throws ParseException {
        Expression expression = null;
        OrderBy orderBy = null;
    jj_consume_token(XMLAGG);
    jj_consume_token(LPAREN);
    expression = expression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      orderBy = orderby(info);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                if(! info.aggregatesAllowed) {
                        {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Aggregate_only_top_level"));} //$NON-NLS-1$
                }

                String name = generateFunctionName(info, "XMLAGG");
                AggregateSymbol agg = new AggregateSymbol(name, "XMLAGG", false, expression);
                agg.setOrderBy(orderBy);
                {if (true) return agg;}
    throw new Error("Missing return statement in function");
  }

  final public AggregateSymbol textAgg(ParseInfo info) throws ParseException {
        DerivedColumn expression = null;
        Character delimiter = null;
        Character quote = null;
        boolean header = false;
        List<DerivedColumn> expressions = new ArrayList<DerivedColumn>();
        OrderBy orderBy = null;
        String encoding = null;
    nonReserved("TEXTAGG");
    jj_consume_token(LPAREN);
    jj_consume_token(FOR);
    expression = derivedColumn(info);
                expressions.add(expression);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      expression = derivedColumn(info);
                        expressions.add(expression);
    }
    if (jj_2_18(2147483647) && ("delimiter".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      delimiter = charVal(info, "DELMITER");
    } else {
      ;
    }
    if (jj_2_19(2147483647) && ("quote".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      quote = charVal(info, "QUOTE");
    } else {
      ;
    }
    if (jj_2_20(2147483647) && ("header".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
            header = true;
    } else {
      ;
    }
    if (jj_2_21(2147483647) && ("encoding".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      encoding = id();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      orderBy = orderby(info);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                if(! info.aggregatesAllowed) {
                        {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Aggregate_only_top_level"));} //$NON-NLS-1$
                }

                TextLine tf = new TextLine();
                tf.setDelimiter(delimiter);
                tf.setQuote(quote);
                tf.setIncludeHeader(header);
                tf.setExpressions(expressions);
                tf.setEncoding(encoding);
                String name = generateFunctionName(info, "TEXTAGG");
                AggregateSymbol agg = new AggregateSymbol(name, "TEXTAGG", false, tf);
                agg.setOrderBy(orderBy);
                {if (true) return agg;}
    throw new Error("Missing return statement in function");
  }

  final public AggregateSymbol aggregateSymbol(ParseInfo info) throws ParseException {
        String func = null;
        Token starToken = null;
        AggregateSymbol agg = null;
        boolean isDistinct = false;
        Expression expression = null;
    if (jj_2_22(3)) {
      func = nonReserved("COUNT");
      jj_consume_token(LPAREN);
      starToken = jj_consume_token(STAR);
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case SOME:
      case ID:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          func = nonReserved("COUNT", "SUM", "AVG", "MIN", "MAX", "EVERY", "STDDEV_POP", "STDDEV_SAMP", "VAR_SAMP", "VAR_POP");
          break;
        case ANY:
          jj_consume_token(ANY);
                                        func = "ANY";
          break;
        case SOME:
          jj_consume_token(SOME);
                                         func = "SOME";
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case DISTINCT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DISTINCT:
            jj_consume_token(DISTINCT);
                                      isDistinct=true;
            break;
          case ALL:
            jj_consume_token(ALL);
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        expression = expression(info);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if(! info.aggregatesAllowed) {
                        {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Aggregate_only_top_level"));} //$NON-NLS-1$
                }
                func = func.toUpperCase();
                String name = generateFunctionName(info, func);
                if(starToken == null) {
                        // Aggregate
                        agg = new AggregateSymbol(name, func, isDistinct, expression);
                } else {
                        // COUNT(*)			
                        agg = new AggregateSymbol(name, func, false, null);
                }
                {if (true) return agg;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a FROM.  The from must handle groups, aliased groups or
 * joined groups. This also handles JDBC escape processinf syntax for outer joins.</p>
 * <p>Example:  "FROM a, b". </p>
 * <p>Example:  "FROM a AS x, b as Y". </p>
 * <p>Example:  "FROM a right outer join b, c, d join e".</p>
 * @param from object which is to be updated with the details in the from clause.
 * @return list containing criteria objects.
 * @throws ParseException if parsing failed
 */
  final public From from(ParseInfo info) throws ParseException {
        FromClause clause = null;
        List clauseList = new LinkedList();
    jj_consume_token(FROM);
    clause = tableReference(info);
                        clauseList.add(clause);
                        clause = null;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      clause = tableReference(info);
                                clauseList.add(clause);
                                clause = null;
    }
                {if (true) return new From(clauseList);}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a join predicate clause, which occurs as an element in the FROM clause.  
 * The join predicate combines two from clauses with a join.</p>
 * @return Join predicate
 * @throws ParseException if parsing failed
 */
  final public FromClause tableReference(ParseInfo info) throws ParseException {
        FromClause result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      nonReserved("OJ");
      result = joinedTable(info);
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[88] = jj_gen;
      if (jj_2_23(1)) {
        result = joinedTable(info);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FromClause joinedTable(ParseInfo info) throws ParseException {
        FromClause result = null;
        JoinPredicate jp = null;
    result = tablePrimary(info);
    label_18:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROSS:
      case UNION:
        jp = crossJoin(info);
        break;
      case FULL:
      case INNER:
      case JOIN:
      case LEFT:
      case RIGHT:
        jp = qualifiedJoin(info);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        jp.setLeftClause(result);
                        result = jp;
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public JoinPredicate crossJoin(ParseInfo info) throws ParseException {
        JoinPredicate result = new JoinPredicate();
        FromClause clause = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROSS:
      jj_consume_token(CROSS);
                          result.setJoinType(JoinType.JOIN_CROSS);
      break;
    case UNION:
      jj_consume_token(UNION);
                                                                             result.setJoinType(JoinType.JOIN_UNION);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(JOIN);
    clause = tablePrimary(info);
                                             result.setRightClause(clause);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public JoinPredicate qualifiedJoin(ParseInfo info) throws ParseException {
        JoinPredicate result = new JoinPredicate();
        FromClause clause = null;
        Criteria onCriteria = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FULL:
    case INNER:
    case LEFT:
    case RIGHT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
        jj_consume_token(RIGHT);
                                  result.setJoinType(JoinType.JOIN_RIGHT_OUTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        break;
      case LEFT:
        jj_consume_token(LEFT);
                           result.setJoinType(JoinType.JOIN_LEFT_OUTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        break;
      case FULL:
        jj_consume_token(FULL);
                            result.setJoinType(JoinType.JOIN_FULL_OUTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[93] = jj_gen;
          ;
        }
        break;
      case INNER:
        jj_consume_token(INNER);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    jj_consume_token(JOIN);
    clause = tableReference(info);
                                               result.setRightClause(clause);
    jj_consume_token(ON);
    onCriteria = criteria(info);
                                             result.setJoinCriteria(Criteria.separateCriteriaByAnd(onCriteria));
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FromClause tablePrimary(ParseInfo info) throws ParseException {
        FromClause clause = null;
        Token lparen = null;
    if (jj_2_25(2147483647) && ("texttable".equalsIgnoreCase(getToken(1).image))) {
      clause = textTable(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XMLTABLE:
        clause = xmlTable(info);
        break;
      case ID:
        clause = unaryFromClause(info);
        break;
      default:
        jj_la1[96] = jj_gen;
        if (jj_2_26(2147483647)) {
          clause = subqueryFromClause(info);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            lparen = jj_consume_token(LPAREN);
            clause = joinedTable(info);
                        setFromClauseOptions(lparen, clause);
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[97] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAKEDEP:
    case MAKENOTDEP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAKEDEP:
        jj_consume_token(MAKEDEP);
                              clause.setMakeDep(true);
        break;
      case MAKENOTDEP:
        jj_consume_token(MAKENOTDEP);
                                   clause.setMakeNotDep(true);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
                {if (true) return clause;}
    throw new Error("Missing return statement in function");
  }

  final public XMLSerialize xmlSerialize(ParseInfo info) throws ParseException {
        Expression expr = null;
        String doc = null;
        Token t = null;
    jj_consume_token(XMLSERIALIZE);
    jj_consume_token(LPAREN);
    if (jj_2_27(2147483647) && (matchesAny(getToken(1).image, "document", "content") != null)) {
      doc = nonReserved("DOCUMENT", "CONTENT");
    } else {
      ;
    }
    expr = expression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
        break;
      case VARCHAR:
        t = jj_consume_token(VARCHAR);
        break;
      case CLOB:
        t = jj_consume_token(CLOB);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                XMLSerialize result = new XMLSerialize();
                result.setExpression(expr);
                if (doc != null) {
                        result.setDocument("document".equalsIgnoreCase(doc));
                }
                if (t != null) {
                        result.setTypeString(t.image);
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String nonReserved(String... expected) throws ParseException {
        Token t = null;
    t = jj_consume_token(ID);
                String result = matchesAny(t.image, expected);
                if (result != null) {
                        {if (true) return result;}
                }
                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.expected_non_reserved", Arrays.toString(expected), t.image));}
    throw new Error("Missing return statement in function");
  }

  final public TextTable textTable(ParseInfo info) throws ParseException {
        Expression file = null;
        TextTable.TextColumn column = null;
        List<TextTable.TextColumn> columns = new ArrayList<TextTable.TextColumn>();
        Character delimiter = null;
        boolean escape = false;
        Character quote = null;
        Integer header = null;
        Integer skip = null;
        String aliasID = null;
    jj_consume_token(ID);
    jj_consume_token(LPAREN);
    file = expression(info);
    nonReserved("COLUMNS");
    column = textColumn(info);
                columns.add(column);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      column = textColumn(info);
                        columns.add(column);
    }
    if (jj_2_28(2147483647) && ("delimiter".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      delimiter = charVal(info, "DELMITER");
    } else {
      ;
    }
    if (jj_2_30(1)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESCAPE:
        jj_consume_token(ESCAPE);
        quote = charVal(info, "ESCAPE");
                                                        escape = true;
        break;
      default:
        jj_la1[103] = jj_gen;
        if (jj_2_29(2147483647) && ("quote".equalsIgnoreCase(getToken(1).image))) {
          jj_consume_token(ID);
          quote = charVal(info, "QUOTE");
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    if (jj_2_31(2147483647) && ("header".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGERVAL:
        header = intVal();
        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
                if (header == null) {
                        header = 1;
                }
    } else {
      ;
    }
    if (jj_2_32(2147483647) && ("skip".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      skip = intVal();
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    aliasID = id();
                TextTable result = new TextTable();
                result.setFile(file);
                result.setColumns(columns);
                result.setDelimiter(delimiter);
                result.setEscape(escape);
                result.setHeader(header);
                result.setSkip(skip);
                result.setName(validateAlias(aliasID));
                result.setQuote(quote);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TextTable.TextColumn textColumn(ParseInfo info) throws ParseException {
        String name = null;
        Constant datatype = null;
        Integer width = null;
    name = id();
    datatype = dataType();
    if (jj_2_33(2147483647) && ("width".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      width = intVal();
    } else {
      ;
    }
                {if (true) return new TextTable.TextColumn(validateElementName(name), (String)datatype.getValue(), width);}
    throw new Error("Missing return statement in function");
  }

  final public XMLQuery xmlQuery(ParseInfo info) throws ParseException {
        String xquery = null;
        XMLNamespaces xmlNamespaces = null;
        DerivedColumn passing = null;
        ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
        Boolean content = null;
        Boolean empty = null;
    jj_consume_token(XMLQUERY);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XMLNAMESPACES:
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    xquery = stringVal();
    if (jj_2_34(2147483647) && ("passing".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      passing = derivedColumn(info);
                passingValues.add(passing);
                passing.setPropagateName(false);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[107] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        passing = derivedColumn(info);
                  passingValues.add(passing);
                  passing.setPropagateName(false);
      }
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
                    empty = false;
        break;
      case ID:
        nonReserved("EMPTY");
                                  empty = true;
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ON);
      nonReserved("EMPTY");
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                XMLQuery result = new XMLQuery();
                result.setXquery(xquery);
                result.setNamespaces(xmlNamespaces);
                result.setPassing(passingValues);
                result.setEmptyOnEmpty(empty);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public XMLTable xmlTable(ParseInfo info) throws ParseException {
        String xquery = null;
        XMLNamespaces xmlNamespaces = null;
        DerivedColumn passing = null;
        ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
        XMLTable.XMLColumn column = null;
        ArrayList<XMLTable.XMLColumn> columns = new ArrayList<XMLTable.XMLColumn>();
        String aliasID = null;
    jj_consume_token(XMLTABLE);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XMLNAMESPACES:
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    xquery = stringVal();
    if (jj_2_35(2147483647) && ("passing".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      passing = derivedColumn(info);
                passingValues.add(passing);
                passing.setPropagateName(false);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        passing = derivedColumn(info);
                  passingValues.add(passing);
                  passing.setPropagateName(false);
      }
    } else {
      ;
    }
    if (jj_2_36(2147483647) && ("columns".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      column = xmlColumn(info);
            columns.add(column);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[112] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        column = xmlColumn(info);
              columns.add(column);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[113] = jj_gen;
      ;
    }
    aliasID = id();
                XMLTable result = new XMLTable();
                result.setXquery(xquery);
                result.setNamespaces(xmlNamespaces);
                result.setPassing(passingValues);
                result.setColumns(columns);
                result.setName(validateAlias(aliasID));
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public XMLTable.XMLColumn xmlColumn(ParseInfo info) throws ParseException {
        String name = null;
        Constant datatype = null;
        String path = null;
        Expression defaultExpr = null;
    name = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      nonReserved("ORDINALITY");
            {if (true) return new XMLTable.XMLColumn(name);}
      break;
    case STRING:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case OBJECT:
    case BLOB:
    case CLOB:
    case XML:
      datatype = dataType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_KEYWORD:
        jj_consume_token(DEFAULT_KEYWORD);
        defaultExpr = expression(info);
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        nonReserved("PATH");
        path = stringVal();
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
                {if (true) return new XMLTable.XMLColumn(name, (String)datatype.getValue(), path, defaultExpr);}
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int intVal() throws ParseException {
        Token t;
    t = jj_consume_token(INTEGERVAL);
                try {
                        {if (true) return Integer.valueOf(t.image);}
                } catch(NumberFormatException e1) {
                        {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Integer_parse", t.image));} //$NON-NLS-1$
                }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a unary from clause, which is just a single group name and an optional alias.
 * @return Unary from clause containing the group
 * @throws ParseException if parsing failed
 */
  final public SubqueryFromClause subqueryFromClause(ParseInfo info) throws ParseException {
    String aliasID = null;
        Command command = null;
        Token lparen = null;
        boolean table = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE:
      jj_consume_token(TABLE);
                          table = true;
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    lparen = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case TABLE:
    case WITH:
    case LPAREN:
      command = queryExpression(info);
      break;
    case CALL:
    case EXEC:
    case EXECUTE:
      command = storedProcedure(info, new StoredProcedure());
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    aliasID = id();
                SubqueryFromClause clause = new SubqueryFromClause(validateAlias(aliasID), command);
        setFromClauseOptions(lparen, clause);
        clause.setTable(table);
        {if (true) return clause;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a unary from clause, which is just a single group name and an optional alias.
 * @return Unary from clause containing the group
 * @throws ParseException if parsing failed
 */
  final public UnaryFromClause unaryFromClause(ParseInfo info) throws ParseException {
        GroupSymbol group = null;
        Token groupID = null;
    String aliasID = null;
        UnaryFromClause clause = null;
    groupID = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      aliasID = id();
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
        if(aliasID != null) {
            group = new GroupSymbol(validateAlias(aliasID), normalizeId(groupID.image));
        } else {
                        group = new GroupSymbol(normalizeId(groupID.image));
        }
        clause = new UnaryFromClause(group);
        setFromClauseOptions(groupID, clause);
                {if (true) return clause;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a WHERE clause.  The where clause holds a criteria.
 * @return Parsed where
 * @throws ParseException if parsing failed
 */
  final public Criteria where(ParseInfo info) throws ParseException {
    Criteria criteria = null;
    jj_consume_token(WHERE);
    criteria = criteria(info);
                {if (true) return criteria;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a criteria.  This will parse any criteria expression.</p>
 * @return Parsed criteria
 * @throws ParseException if parsing failed
 */
  final public Criteria criteria(ParseInfo info) throws ParseException {
        Criteria criteria = null;
    criteria = compoundCritOr(info);
                {if (true) return criteria;}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse a compound logical OR criteria.</p>
 * @return Parsed OR criteria
 * @throws ParseException if parsing failed
 */
  final public Criteria compoundCritOr(ParseInfo info) throws ParseException {
    ArrayList logicList = new ArrayList();
    Criteria logicPart = null;
    logicPart = compoundCritAnd(info);
                                                                          logicList.add(logicPart);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_23;
      }
      jj_consume_token(OR);
      logicPart = compoundCritAnd(info);
                                                                  logicList.add(logicPart);
    }
                if(logicList.size() == 1) {
                        {if (true) return (Criteria) logicList.get(0);}
                } else {
                {if (true) return new CompoundCriteria(CompoundCriteria.OR,logicList);}
                }
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a compound logical AND criteria.</p>
 * @return Parsed AND criteria
 * @throws ParseException if parsing failed
 */
  final public Criteria compoundCritAnd(ParseInfo info) throws ParseException {
    ArrayList logicList = new ArrayList();
    Criteria logicPart = null;
    logicPart = notCrit(info);
                                                          logicList.add(logicPart);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_24;
      }
      jj_consume_token(AND);
      logicPart = notCrit(info);
                                                  logicList.add(logicPart);
    }
                if(logicList.size() == 1) {
                        {if (true) return (Criteria) logicList.get(0);}
                } else {
                {if (true) return new CompoundCriteria(CompoundCriteria.AND,logicList);}
                }
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a logical NOT criteria.</p>
 * @return Parsed NOT criteria
 * @throws ParseException if parsing failed
 */
  final public Criteria notCrit(ParseInfo info) throws ParseException {
    Criteria crit = null;
        boolean isNot = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                isNot=true;
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    crit = booleanPrimary(info);
                if(isNot) {
                        {if (true) return new NotCriteria(crit);}
                } else {
                        {if (true) return crit;}
                }
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a boolean primary.</p>
 * @return criteria
 * @throws ParseException if parsing failed
 */
  final public Criteria booleanPrimary(ParseInfo info) throws ParseException {
    Expression ex = null;
    Criteria crit = null;
    if (jj_2_40(2)) {
      crit = translateCriteria(info);
    } else if (jj_2_41(1)) {
      ex = commonValueExpression(info);
                         if (ex instanceof Criteria) {
                                crit = (Criteria)ex;
                         } else {
                        crit = new ExpressionCriteria(ex);
                     }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BETWEEN:
      case IN:
      case IS:
      case LIKE:
      case NOT:
      case EQ:
      case NE:
      case NE2:
      case LT:
      case LE:
      case GT:
      case GE:
        if (jj_2_37(2)) {
          crit = betweenCrit(info, ex);
        } else if (jj_2_38(2)) {
          crit = matchCrit(info, ex);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IN:
          case NOT:
            crit = setCrit(info, ex);
            break;
          case IS:
            crit = isNullCrit(info, ex);
            break;
          default:
            jj_la1[125] = jj_gen;
            if (jj_2_39(2147483647)) {
              crit = subqueryCompareCriteria(info, ex);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EQ:
              case NE:
              case NE2:
              case LT:
              case LE:
              case GT:
              case GE:
                crit = compareCrit(info, ex);
                break;
              default:
                jj_la1[126] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXISTS:
        crit = existsCriteria(info);
        break;
      case HAS:
        crit = hasCriteria();
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return crit;}
    throw new Error("Missing return statement in function");
  }

  final public Token operator() throws ParseException {
        Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      operator = jj_consume_token(EQ);
      break;
    case NE:
      operator = jj_consume_token(NE);
      break;
    case NE2:
      operator = jj_consume_token(NE2);
      break;
    case LT:
      operator = jj_consume_token(LT);
      break;
    case LE:
      operator = jj_consume_token(LE);
      break;
    case GT:
      operator = jj_consume_token(GT);
      break;
    case GE:
      operator = jj_consume_token(GE);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return operator;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a compare criteria.</p>
 * @return Parsed compare criteria
 * @throws ParseException if parsing failed
 */
  final public CompareCriteria compareCrit(ParseInfo info, Expression expression) throws ParseException {
    Expression value = null;
    Token operator = null;
    operator = operator();
    value = commonValueExpression(info);
                CompareCriteria compareCriteria = new CompareCriteria();

                // Set left expression
                compareCriteria.setLeftExpression(expression);

                compareCriteria.setOperator(getOperator(operator.image));

                // Set value
                compareCriteria.setRightExpression(value);

            {if (true) return compareCriteria;}
    throw new Error("Missing return statement in function");
  }

  final public QueryCommand subquery(ParseInfo info) throws ParseException {
    QueryCommand subquery = null;
    StoredProcedure proc = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case TABLE:
    case WITH:
    case LPAREN:
      subquery = queryExpression(info);
      break;
    case CALL:
    case EXEC:
    case EXECUTE:
      proc = storedProcedure(info, new StoredProcedure());
            subquery = new Query(new Select(Arrays.asList(new AllSymbol())), new From(Arrays.asList(new SubqueryFromClause("x", proc))), null, null, null);
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
                {if (true) return subquery;}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse a subquery compare criteria.</p>
 * @return Parsed subquery compare criteria
 * @throws ParseException if parsing failed
 */
  final public SubqueryCompareCriteria subqueryCompareCriteria(ParseInfo info, Expression expression) throws ParseException {
    SubqueryCompareCriteria subqueryCrit = null;
    QueryCommand subquery = null;
    Token operator = null;
    Token quantifier = null;
    operator = operator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
      quantifier = jj_consume_token(ANY);
      break;
    case SOME:
      quantifier = jj_consume_token(SOME);
      break;
    case ALL:
      quantifier = jj_consume_token(ALL);
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    subquery = subquery(info);
                subqueryCrit = new SubqueryCompareCriteria();
            subqueryCrit.setLeftExpression(expression);
            subqueryCrit.setCommand(subquery);

                // Set operator
                subqueryCrit.setOperator(getOperator(operator.image));

                // Set predicate quantifier
                if(quantifier.image.equalsIgnoreCase("any")) { //$NON-NLS-1$
                        subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.ANY);
                } else if(quantifier.image.equalsIgnoreCase("some")) { //$NON-NLS-1$
                        subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.SOME);
                } else if(quantifier.image.equalsIgnoreCase("all")) { //$NON-NLS-1$
                        subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.ALL);
                }

            {if (true) return subqueryCrit;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a match criteria. Also parses JDBC escape syntax for match criteria.</p>
 * @return Parsed match criteria
 * @throws ParseException if parsing failed
 */
  final public MatchCriteria matchCrit(ParseInfo info, Expression expression) throws ParseException {
    Character esc = null;
        Expression value = null;
        boolean negated = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                negated = true;
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    jj_consume_token(LIKE);
    value = commonValueExpression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESCAPE:
    case LBRACE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESCAPE:
        jj_consume_token(ESCAPE);
        esc = charVal(info, "LIKE ESCAPE");
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        jj_consume_token(ESCAPE);
        esc = charVal(info, "LIKE ESCAPE");
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
        MatchCriteria matchcriteria = new MatchCriteria(expression, value);
                matchcriteria.setNegated(negated);
            if(esc != null) {
                        matchcriteria.setEscapeChar(esc.charValue());
                }
                {if (true) return matchcriteria;}
    throw new Error("Missing return statement in function");
  }

  final public Character charVal(ParseInfo info, String type) throws ParseException {
        String escStr = null;
    escStr = stringVal();
                if (escStr.length() != 1) {
                        {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Invalid_char", type, escStr));} //$NON-NLS-1$
                }
                {if (true) return Character.valueOf(escStr.charAt(0));}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an [NOT] BETWEEN criteria.</p>
 * @return Parsed BETWEEN criteria
 * @throws ParseException if parsing failed
 */
  final public BetweenCriteria betweenCrit(ParseInfo info, Expression expression) throws ParseException {
        Expression lowerExpression = null, upperExpression = null;
        boolean negated = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                negated=true;
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    jj_consume_token(BETWEEN);
    lowerExpression = commonValueExpression(info);
    jj_consume_token(AND);
    upperExpression = commonValueExpression(info);
                BetweenCriteria criteria = new BetweenCriteria(expression, lowerExpression, upperExpression);
                criteria.setNegated(negated);
                {if (true) return criteria;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an IS [NOT] NULL criteria.</p>
 * @return Parsed IS NULL criteria
 * @throws ParseException if parsing failed
 */
  final public IsNullCriteria isNullCrit(ParseInfo info, Expression expression) throws ParseException {
        boolean negated = false;
        IsNullCriteria criteria = null;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                negated = true;
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
        criteria = new IsNullCriteria(expression);
        criteria.setNegated(negated);
        {if (true) return criteria;}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse a set criteria.</p>
 * @return Parsed set criteria
 * @throws ParseException if parsing failed
 */
  final public AbstractSetCriteria setCrit(ParseInfo info, Expression expression) throws ParseException {
        Expression value = null;
        List setList = new ArrayList();
        QueryCommand command = null;
        boolean negated = false;
        AbstractSetCriteria criteria = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                negated = true;
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
    jj_consume_token(IN);
    if (jj_2_42(2147483647)) {
      command = subquery(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        value = commonValueExpression(info);
                                setList.add(value);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[138] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          value = commonValueExpression(info);
                                        setList.add(value);
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if(setList.size() == 1 && setList.get(0) instanceof ScalarSubquery) {
                        ScalarSubquery subqueryExpr = (ScalarSubquery) setList.get(0);
                        criteria = new SubquerySetCriteria(expression, subqueryExpr.getCommand());
                } else if (command != null) {
                        criteria = new SubquerySetCriteria(expression, command);
                } else {
                    criteria = new SetCriteria(expression, setList);
                }
            criteria.setNegated(negated);
            {if (true) return criteria;}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse an exists criteria.</p>
 * @return Parsed exists criteria
 * @throws ParseException if parsing failed
 */
  final public ExistsCriteria existsCriteria(ParseInfo info) throws ParseException {
    ExistsCriteria existsCrit = null;
    QueryCommand subquery = null;
    jj_consume_token(EXISTS);
    subquery = subquery(info);
                existsCrit = new ExistsCriteria(subquery);
            {if (true) return existsCrit;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a GROUP BY clause.  </p>
 * @return Parsed group by
 * @throws ParseException if parsing failed
 */
  final public GroupBy groupBy(ParseInfo info) throws ParseException {
        GroupBy groupBy = new GroupBy();
        SingleElementSymbol symbol = null;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    symbol = groupByItem(info);
                        groupBy.addSymbol(symbol);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[140] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      symbol = groupByItem(info);
                                groupBy.addSymbol(symbol);
    }
                {if (true) return groupBy;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a GROUP BY list item.  </p>
 * @return Parsed group by item
 * @throws ParseException if parsing failed
 */
  final public SingleElementSymbol groupByItem(ParseInfo info) throws ParseException {
        Expression expr = null;
        SingleElementSymbol symbol = null;
    expr = expression(info);
                if(expr instanceof ElementSymbol) {
                        symbol = (ElementSymbol) expr;
                } else {
                        String exprName = generateFunctionName(info, null);
                        symbol = new ExpressionSymbol(exprName, expr);
                }
                {if (true) return symbol;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a HAVING clause.  </p>
 * @return Parsed having
 * @throws ParseException if parsing failed
 */
  final public Criteria having(ParseInfo info) throws ParseException {
    Criteria criteria = null;
        info.aggregatesAllowed = true;
    jj_consume_token(HAVING);
    criteria = criteria(info);
                info.aggregatesAllowed = false;
                {if (true) return criteria;}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse an ORDER BY clause.</p>
 * @return Parsed ORDER BY
 * @throws ParseException if parsing failed
 */
  final public OrderBy orderby(ParseInfo info) throws ParseException {
    OrderBy orderby = new OrderBy();
    OrderByItem item = null;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    item = sortSpecification(info);
        orderby.getOrderByItems().add(item);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      item = sortSpecification(info);
                orderby.getOrderByItems().add(item);
    }
            {if (true) return orderby;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByItem sortSpecification(ParseInfo info) throws ParseException {
    SingleElementSymbol ex = null;
    boolean ascending = true;
    String nullOrdering = null;
    ex = sortKey(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
                         ascending=false;
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[143] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nonReserved("NULLS");
      nullOrdering = nonReserved("FIRST", "LAST");
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
        OrderByItem item = new OrderByItem(ex, ascending);
        if (nullOrdering != null) {
                item.setNullOrdering(org.teiid.language.SortSpecification.NullOrdering.valueOf(nullOrdering.toUpperCase()));
        }
        {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  final public SingleElementSymbol sortKey(ParseInfo info) throws ParseException {
    Expression ex = null;
    ex = expression(info);
        //legacy support check for positional constants
        if (ex instanceof Constant) {
                boolean valid = false;
            Constant c = (Constant)ex;
            if (c.getValue() instanceof Integer) {
                Integer val = (Integer)c.getValue();
                valid = val.intValue() > 0;
            }
            if (!valid) {
                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.non_position_constant", ex));} //$NON-NLS-1$
            }
        }
        if(ex instanceof ElementSymbol) {
            {if (true) return (ElementSymbol)ex;}
        }
        String exprName = generateFunctionName(info, null);
        {if (true) return new ExpressionSymbol(exprName, ex);}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse an LIMIT clause.</p>
 * @return Parsed LIMIT
  * @throws ParseException if parsing failed
 */
  final public Limit limit(ParseInfo info) throws ParseException {
        Token val = null;
        Token rowLimit = null;
        Token ref = null;
        Expression expr1 = null;
        Expression expr2 = null;
    jj_consume_token(LIMIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGERVAL:
      val = jj_consume_token(INTEGERVAL);
      break;
    case QMARK:
      jj_consume_token(QMARK);
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGERVAL:
        rowLimit = jj_consume_token(INTEGERVAL);
        break;
      case QMARK:
        ref = jj_consume_token(QMARK);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
            if (val == null) {
                expr1 = new Reference(info.referenceCount++);
            } else {
                expr1 = new Constant(Integer.valueOf(val.image), DataTypeManager.DefaultDataClasses.INTEGER);
            }
                if (rowLimit == null && ref == null) {
                    {if (true) return new Limit(null, expr1);}
                }
                if (rowLimit == null) {
                    expr2 = new Reference(info.referenceCount++);
                } else {
                expr2 = new Constant(Integer.valueOf(rowLimit.image), DataTypeManager.DefaultDataClasses.INTEGER);
                }
                {if (true) return new Limit(expr1, expr2);}
    throw new Error("Missing return statement in function");
  }

/** 
 * <p>Parse an OPTION clause.</p>
 * @return Parsed OPTION clause
 * @throws ParseException if parsing failed
 */
  final public Option option(ParseInfo info) throws ParseException {
        String id = null;
        Token nocache = null;
        Option option = new Option();
    jj_consume_token(OPTION);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAKEDEP:
      case MAKENOTDEP:
      case NOCACHE:
        ;
        break;
      default:
        jj_la1[148] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAKEDEP:
        jj_consume_token(MAKEDEP);
        id = id();
            option.addDependentGroup(id);
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[149] = jj_gen;
            break label_29;
          }
          jj_consume_token(COMMA);
          id = id();
                option.addDependentGroup(id);
        }
        break;
      case MAKENOTDEP:
        jj_consume_token(MAKENOTDEP);
        id = id();
            option.addNotDependentGroup(id);
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[150] = jj_gen;
            break label_30;
          }
          jj_consume_token(COMMA);
          id = id();
                option.addNotDependentGroup(id);
        }
        break;
      case NOCACHE:
        nocache = jj_consume_token(NOCACHE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          id = id();
            option.addNoCacheGroup(id);
          label_31:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[151] = jj_gen;
              break label_31;
            }
            jj_consume_token(COMMA);
            id = id();
                option.addNoCacheGroup(id);
          }
          break;
        default:
          jj_la1[152] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                option.setNoCache( (nocache != null) );
                {if (true) return option;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an expression - made up of literals and functions.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
  final public Expression expression(ParseInfo info) throws ParseException {
        Expression expression = null;
    expression = criteria(info);
                if (expression instanceof ExpressionCriteria) {
                        {if (true) return ((ExpressionCriteria)expression).getExpression();}
                }
                {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression commonValueExpression(ParseInfo info) throws ParseException {
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = plusExpression(info);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT_OP:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_32;
      }
      jj_consume_token(CONCAT_OP);
      rightExpression = plusExpression(info);
                                leftExpression = new Function("||", new Expression[] {leftExpression, rightExpression}); //$NON-NLS-1$
                                rightExpression = null;
    }
                {if (true) return leftExpression;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an expression - made up of literals and functions.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
  final public Expression plusExpression(ParseInfo info) throws ParseException {
        Expression leftExpression = null;
        Expression rightExpression = null;
        String operator = null;
    leftExpression = timesExpression(info);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[155] = jj_gen;
        break label_33;
      }
      operator = plusOperator();
      rightExpression = timesExpression(info);
                                leftExpression = new Function(operator, new Expression[] { leftExpression, rightExpression });
                                rightExpression = null;
                                operator = null;
    }
                {if (true) return leftExpression;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse the add/subtract operators.</p>
 * @return "+" or "-"
 * @throws ParseException if parsing failed
 */
  final public String plusOperator() throws ParseException {
        Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      operator = jj_consume_token(PLUS);
      break;
    case MINUS:
      operator = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return operator.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse an expression - made up of literals and functions.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
  final public Expression timesExpression(ParseInfo info) throws ParseException {
        Expression leftExpression = null;
        Expression rightExpression = null;
        String operator = null;
    leftExpression = valueExpressionPrimary(info);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[157] = jj_gen;
        break label_34;
      }
      operator = timesOperator();
      rightExpression = valueExpressionPrimary(info);
                                leftExpression = new Function(operator, new Expression[] {leftExpression, rightExpression});
                                rightExpression = null;
                                operator = null;
    }
                {if (true) return leftExpression;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse the multiply/divide operator.</p>
 * @return "*" or "/"
 * @throws ParseException if parsing failed
 */
  final public String timesOperator() throws ParseException {
        Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      operator = jj_consume_token(STAR);
      break;
    case SLASH:
      operator = jj_consume_token(SLASH);
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return operator.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a basic expression.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
  final public Expression valueExpressionPrimary(ParseInfo info) throws ParseException {
        Token refToken = null;
        Expression expression = null;
        Token symbol = null;
        Constant literal = null;
        QueryCommand subquery = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      // Reference
                      refToken = jj_consume_token(QMARK);
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case UNKNOWN:
    case DATETYPE:
    case TIMETYPE:
    case TIMESTAMPTYPE:
    case BOOLEANTYPE:
    case INTEGERVAL:
    case FLOATVAL:
    case STRINGVAL:
      // Literal
                      literal = literal();
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      nonReserved("FN");
      expression = function(info);
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[159] = jj_gen;
      if (jj_2_43(2147483647)) {
        expression = textAgg(info);
      } else if (jj_2_44(2147483647) && (matchesAny(getToken(1).image, "count", "min", "max", "sum", "avg", "every", "STDDEV_POP", "STDDEV_SAMP", "VAR_SAMP", "VAR_POP") != null)) {
        expression = aggregateSymbol(info);
      } else if (jj_2_45(2147483647)) {
        expression = aggregateSymbol(info);
      } else if (jj_2_46(2147483647)) {
        expression = aggregateSymbol(info);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XMLAGG:
          expression = xmlAgg(info);
          break;
        default:
          jj_la1[160] = jj_gen;
          if (jj_2_47(2)) {
            expression = function(info);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              symbol = jj_consume_token(ID);
                                String symbolImage = symbol.image;
                                if(isStringLiteral(symbolImage, info)) {
                                    literal = new Constant(normalizeStringLiteral(symbolImage));
                                    symbol = null;
                                }
              break;
            default:
              jj_la1[161] = jj_gen;
              if (jj_2_48(2147483647)) {
                subquery = subquery(info);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LPAREN:
                  jj_consume_token(LPAREN);
                  expression = expression(info);
                  jj_consume_token(RPAREN);
                  break;
                default:
                  jj_la1[162] = jj_gen;
                  if (jj_2_49(2)) {
                    expression = searchedCaseExpression(info);
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case CASE:
                      // Non-searched CASE expressions
                                      expression = caseExpression(info);
                      break;
                    default:
                      jj_la1[163] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
                if(refToken != null) {
                        {if (true) return new Reference(info.referenceCount++);}
                } else if(symbol != null) {
                        {if (true) return new ElementSymbol(normalizeId(symbol.image));}
                } else if(literal != null) {
                        {if (true) return literal;}         // may be null literal
                } else if (subquery != null){
                        {if (true) return new ScalarSubquery(subquery);}
                } else {
                        {if (true) return expression;}
                }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a non-searched CASE expression.
 * @return CaseExpression
 * @throws ParseException if parsing failed
 */
  final public CaseExpression caseExpression(ParseInfo info) throws ParseException {
        Expression expression = null, whenExpression = null, thenExpression = null, elseExpression = null;
        ArrayList whenExpressions = new ArrayList();
        ArrayList thenExpressions = new ArrayList();
    jj_consume_token(CASE);
    expression = expression(info);
    label_35:
    while (true) {
      jj_consume_token(WHEN);
      whenExpression = expression(info);
      jj_consume_token(THEN);
      thenExpression = expression(info);
                        whenExpressions.add(whenExpression);
                        thenExpressions.add(thenExpression);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[164] = jj_gen;
        break label_35;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseExpression = expression(info);
      break;
    default:
      jj_la1[165] = jj_gen;
      ;
    }
    jj_consume_token(END);
                CaseExpression caseExpr = new CaseExpression(expression, whenExpressions, thenExpressions);
                caseExpr.setElseExpression(elseExpression);
                {if (true) return caseExpr;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a searched CASE expression.
 * @return SearchedCaseExpression
 * @throws ParseException if parsing failed
 */
  final public SearchedCaseExpression searchedCaseExpression(ParseInfo info) throws ParseException {
        Expression thenExpression = null, elseExpression = null;
        Criteria whenCriteria = null;
        ArrayList whenCriteriaList = new ArrayList();
        ArrayList thenExpressions = new ArrayList();
    jj_consume_token(CASE);
    label_36:
    while (true) {
      jj_consume_token(WHEN);
      whenCriteria = criteria(info);
      jj_consume_token(THEN);
      thenExpression = expression(info);
                        whenCriteriaList.add(whenCriteria);
                        thenExpressions.add(thenExpression);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[166] = jj_gen;
        break label_36;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseExpression = expression(info);
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    jj_consume_token(END);
                SearchedCaseExpression caseExpr = new SearchedCaseExpression(whenCriteriaList, thenExpressions);
                caseExpr.setElseExpression(elseExpression);
                {if (true) return caseExpr;}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a function. </p>
 * @return Parsed function
 * @throws ParseException if parsing failed
 */
  final public Expression function(ParseInfo info) throws ParseException {
        String funcName = null;

        Expression expression = null;
        ArrayList args = new ArrayList();
        Token funcToken = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONVERT:
      funcToken = jj_consume_token(CONVERT);
      jj_consume_token(LPAREN);
      expression = expression(info);
                        args.add(expression);
                        expression = null;
      jj_consume_token(COMMA);
      expression = dataType();
                        args.add(expression);
                        expression = null;
      jj_consume_token(RPAREN);
      break;
    case CAST:
      funcToken = jj_consume_token(CAST);
      jj_consume_token(LPAREN);
      expression = expression(info);
                        args.add(expression);
                        expression = null;
      jj_consume_token(AS);
      expression = dataType();
                        args.add(expression);
                        expression = null;
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[175] = jj_gen;
      if (jj_2_55(2147483647) && (matchesAny(getToken(1).image, "to_chars", "to_bytes") != null)) {
        funcName = nonReserved("TO_CHARS", "TO_BYTES");
        jj_consume_token(LPAREN);
        expression = expression(info);
                        args.add(expression);
                        expression = null;
        jj_consume_token(COMMA);
        expression = stringConstant();
                        args.add(expression);
                        expression = null;
        jj_consume_token(RPAREN);
      } else if (jj_2_56(2147483647) && (matchesAny(getToken(1).image, "timestampadd", "timestampdiff") != null)) {
        funcName = nonReserved("TIMESTAMPADD", "TIMESTAMPDIFF");
        jj_consume_token(LPAREN);
        expression = intervalType();
                        args.add(expression);
                        expression = null;
        jj_consume_token(COMMA);
        expression = expression(info);
                        args.add(expression);
                        expression = null;
        jj_consume_token(COMMA);
        expression = expression(info);
                        args.add(expression);
                        expression = null;
        jj_consume_token(RPAREN);
      } else if (jj_2_57(2147483647) && (getToken(1).image.equalsIgnoreCase("querystring"))) {
        expression = queryString(info);
                {if (true) return expression;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
        case HOUR:
        case LEFT:
        case MINUTE:
        case MONTH:
        case RIGHT:
        case SECOND:
        case USER:
        case YEAR:
        case XMLCONCAT:
        case XMLCOMMENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT:
            funcToken = jj_consume_token(LEFT);
            break;
          case RIGHT:
            funcToken = jj_consume_token(RIGHT);
            break;
          case CHAR:
            funcToken = jj_consume_token(CHAR);
            break;
          case USER:
            funcToken = jj_consume_token(USER);
            break;
          case YEAR:
            funcToken = jj_consume_token(YEAR);
            break;
          case MONTH:
            funcToken = jj_consume_token(MONTH);
            break;
          case HOUR:
            funcToken = jj_consume_token(HOUR);
            break;
          case MINUTE:
            funcToken = jj_consume_token(MINUTE);
            break;
          case SECOND:
            funcToken = jj_consume_token(SECOND);
            break;
          case XMLCONCAT:
            funcToken = jj_consume_token(XMLCONCAT);
            break;
          case XMLCOMMENT:
            funcToken = jj_consume_token(XMLCOMMENT);
            break;
          default:
            jj_la1[168] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(LPAREN);
          if (jj_2_50(1)) {
            expression = expression(info);
                                args.add(expression);
                                expression = null;
            label_37:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[169] = jj_gen;
                break label_37;
              }
              jj_consume_token(COMMA);
              expression = expression(info);
                                args.add(expression);
                                expression = null;
            }
          } else {
            ;
          }
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[176] = jj_gen;
          if (jj_2_58(2147483647)) {
            funcToken = jj_consume_token(INSERT);
            jj_consume_token(LPAREN);
            if (jj_2_51(1)) {
              expression = expression(info);
                                args.add(expression);
                                expression = null;
              label_38:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[170] = jj_gen;
                  break label_38;
                }
                jj_consume_token(COMMA);
                expression = expression(info);
                                args.add(expression);
                                expression = null;
              }
            } else {
              ;
            }
            jj_consume_token(RPAREN);
          } else if (jj_2_59(2147483647)) {
            funcToken = jj_consume_token(TRANSLATE);
            jj_consume_token(LPAREN);
            if (jj_2_52(1)) {
              expression = expression(info);
                                args.add(expression);
                                expression = null;
              label_39:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[171] = jj_gen;
                  break label_39;
                }
                jj_consume_token(COMMA);
                expression = expression(info);
                                args.add(expression);
                                expression = null;
              }
            } else {
              ;
            }
            jj_consume_token(RPAREN);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case XMLPARSE:
              expression = xmlParse(info);
                {if (true) return expression;}
              break;
            case XMLELEMENT:
              expression = xmlElement(info);
                {if (true) return expression;}
              break;
            case XMLPI:
              funcToken = jj_consume_token(XMLPI);
              jj_consume_token(LPAREN);
              if (jj_2_53(2147483647) && ("name".equalsIgnoreCase(getToken(1).image))) {
                jj_consume_token(ID);
                expression = idExpression();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case ID:
                  expression = idExpression();
                  break;
                default:
                  jj_la1[172] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
                        args.add(expression);
                        expression = null;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                expression = expression(info);
                                args.add(expression);
                                expression = null;
                break;
              default:
                jj_la1[173] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
              break;
            case XMLFOREST:
              expression = xmlForest(info);
                        {if (true) return expression;}
              break;
            case XMLSERIALIZE:
              expression = xmlSerialize(info);
                        {if (true) return expression;}
              break;
            case XMLQUERY:
              expression = xmlQuery(info);
                        {if (true) return expression;}
              break;
            case ID:
              funcName = id();
              jj_consume_token(LPAREN);
              if (jj_2_54(1)) {
                expression = expression(info);
                                args.add(expression);
                                expression = null;
                label_40:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case COMMA:
                    ;
                    break;
                  default:
                    jj_la1[174] = jj_gen;
                    break label_40;
                  }
                  jj_consume_token(COMMA);
                  expression = expression(info);
                                args.add(expression);
                                expression = null;
                }
              } else {
                ;
              }
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[177] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
                if(funcName == null) {
                        funcName = funcToken.image;
                }

                {if (true) return new Function(funcName, (Expression[])args.toArray(new Expression[args.size()]));}
    throw new Error("Missing return statement in function");
  }

  final public Constant stringConstant() throws ParseException {
        String val = null;
    val = stringVal();
                {if (true) return new Constant(val);}
    throw new Error("Missing return statement in function");
  }

  final public XMLParse xmlParse(ParseInfo info) throws ParseException {
        Expression expr = null;
        String doc = null;
        boolean wellformed = false;
    jj_consume_token(XMLPARSE);
    jj_consume_token(LPAREN);
    doc = nonReserved("DOCUMENT", "CONTENT");
    expr = expression(info);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nonReserved("WELLFORMED");
           wellformed = true;
      break;
    default:
      jj_la1[178] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                XMLParse result = new XMLParse();
                result.setDocument("document".equalsIgnoreCase(doc));
                result.setExpression(expr);
                result.setWellFormed(wellformed);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public QueryString queryString(ParseInfo info) throws ParseException {
        Expression path = null;
        DerivedColumn arg = null;
        ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>();
    nonReserved("QUERYSTRING");
    jj_consume_token(LPAREN);
    path = expression(info);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[179] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      arg = derivedColumn(info);
                args.add(arg);
                arg = null;
    }
    jj_consume_token(RPAREN);
                {if (true) return new QueryString(path, args);}
    throw new Error("Missing return statement in function");
  }

  final public XMLElement xmlElement(ParseInfo info) throws ParseException {
        String name = null;
        ArrayList content = new ArrayList();
        XMLNamespaces xmlNamespaces = null;
        XMLAttributes xmlAttributes = null;
        Expression expression = null;
    jj_consume_token(XMLELEMENT);
    jj_consume_token(LPAREN);
    if (jj_2_60(2147483647) && ("name".equalsIgnoreCase(getToken(1).image))) {
      jj_consume_token(ID);
      name = id();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        name = id();
        break;
      default:
        jj_la1[180] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_61(2)) {
      jj_consume_token(COMMA);
      xmlNamespaces = xmlNamespaces(info);
    } else {
      ;
    }
    if (jj_2_62(2)) {
      jj_consume_token(COMMA);
      xmlAttributes = xmlAttributes(info);
    } else {
      ;
    }
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[181] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      expression = expression(info);
                content.add(expression);
                expression = null;
    }
    jj_consume_token(RPAREN);
                XMLElement result = new XMLElement(name, content);
                result.setNamespaces(xmlNamespaces);
                result.setAttributes(xmlAttributes);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public XMLAttributes xmlAttributes(ParseInfo info) throws ParseException {
        DerivedColumn expression = null;
        ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>();
    jj_consume_token(XMLATTRIBUTES);
    jj_consume_token(LPAREN);
    expression = derivedColumn(info);
                args.add(expression);
                expression = null;
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[182] = jj_gen;
        break label_43;
      }
      jj_consume_token(COMMA);
      expression = derivedColumn(info);
                args.add(expression);
                expression = null;
    }
    jj_consume_token(RPAREN);
                {if (true) return new XMLAttributes(args);}
    throw new Error("Missing return statement in function");
  }

  final public XMLForest xmlForest(ParseInfo info) throws ParseException {
        DerivedColumn expression = null;
        XMLNamespaces xmlNamespaces = null;
        ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>();
    jj_consume_token(XMLFOREST);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XMLNAMESPACES:
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[183] = jj_gen;
      ;
    }
    expression = derivedColumn(info);
                args.add(expression);
                expression = null;
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[184] = jj_gen;
        break label_44;
      }
      jj_consume_token(COMMA);
      expression = derivedColumn(info);
                args.add(expression);
                expression = null;
    }
    jj_consume_token(RPAREN);
                XMLForest result = new XMLForest(args);
                result.setNamespaces(xmlNamespaces);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public XMLNamespaces xmlNamespaces(ParseInfo info) throws ParseException {
        ArrayList namespaces = new ArrayList();
        XMLNamespaces.NamespaceItem item = null;
    jj_consume_token(XMLNAMESPACES);
    jj_consume_token(LPAREN);
    item = namespaceItem(info);
                namespaces.add(item);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[185] = jj_gen;
        break label_45;
      }
      jj_consume_token(COMMA);
      item = namespaceItem(info);
                 namespaces.add(item);
    }
    jj_consume_token(RPAREN);
                {if (true) return new XMLNamespaces(namespaces);}
    throw new Error("Missing return statement in function");
  }

  final public XMLNamespaces.NamespaceItem namespaceItem(ParseInfo info) throws ParseException {
        String uri = null;
        String prefix = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRINGVAL:
      uri = stringVal();
      jj_consume_token(AS);
      prefix = id();
                        {if (true) return new XMLNamespaces.NamespaceItem(uri, prefix);}
      break;
    case NO:
      jj_consume_token(NO);
      jj_consume_token(DEFAULT_KEYWORD);
                        {if (true) return new XMLNamespaces.NamespaceItem();}
      break;
    case DEFAULT_KEYWORD:
      jj_consume_token(DEFAULT_KEYWORD);
      uri = stringVal();
                        {if (true) return new XMLNamespaces.NamespaceItem(uri);}
      break;
    default:
      jj_la1[186] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Constant idExpression() throws ParseException {
        String id = null;
    id = id();
                {if (true) return new Constant(id);}
    throw new Error("Missing return statement in function");
  }

  final public String dataTypeString() throws ParseException {
        Token typeToken = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      typeToken = jj_consume_token(STRING);
      break;
    case VARCHAR:
      typeToken = jj_consume_token(VARCHAR);
      break;
    case BOOLEAN:
      typeToken = jj_consume_token(BOOLEAN);
      break;
    case BYTE:
      typeToken = jj_consume_token(BYTE);
      break;
    case TINYINT:
      typeToken = jj_consume_token(TINYINT);
      break;
    case SHORT:
      typeToken = jj_consume_token(SHORT);
      break;
    case SMALLINT:
      typeToken = jj_consume_token(SMALLINT);
      break;
    case CHAR:
      typeToken = jj_consume_token(CHAR);
      break;
    case INTEGER:
      typeToken = jj_consume_token(INTEGER);
      break;
    case LONG:
      typeToken = jj_consume_token(LONG);
      break;
    case BIGINT:
      typeToken = jj_consume_token(BIGINT);
      break;
    case BIGINTEGER:
      typeToken = jj_consume_token(BIGINTEGER);
      break;
    case FLOAT:
      typeToken = jj_consume_token(FLOAT);
      break;
    case REAL:
      typeToken = jj_consume_token(REAL);
      break;
    case DOUBLE:
      typeToken = jj_consume_token(DOUBLE);
      break;
    case BIGDECIMAL:
      typeToken = jj_consume_token(BIGDECIMAL);
      break;
    case DECIMAL:
      typeToken = jj_consume_token(DECIMAL);
      break;
    case DATE:
      typeToken = jj_consume_token(DATE);
      break;
    case TIME:
      typeToken = jj_consume_token(TIME);
      break;
    case TIMESTAMP:
      typeToken = jj_consume_token(TIMESTAMP);
      break;
    case OBJECT:
      typeToken = jj_consume_token(OBJECT);
      break;
    case BLOB:
      typeToken = jj_consume_token(BLOB);
      break;
    case CLOB:
      typeToken = jj_consume_token(CLOB);
      break;
    case XML:
      typeToken = jj_consume_token(XML);
      break;
    default:
      jj_la1[187] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return typeToken.image;}
    throw new Error("Missing return statement in function");
  }

  final public Constant dataType() throws ParseException {
        String type = null;
    type = dataTypeString();
                {if (true) return new Constant(type);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an interval type name - used only in TIMESTAMPADD and TIMESTAMPDIFF functions.
 * @return Interval type parsed into a constant string object
 * @throws ParseException if parsing failed
 */
  final public Constant intervalType() throws ParseException {
        String type = null;
    type = nonReserved("SQL_TSI_FRAC_SECOND", "SQL_TSI_SECOND", "SQL_TSI_MINUTE", "SQL_TSI_HOUR", "SQL_TSI_DAY", "SQL_TSI_WEEK", "SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_YEAR");
                {if (true) return new Constant(type);}
    throw new Error("Missing return statement in function");
  }

/**
 * <p>Parse a literal - strings must be wrapped in either '' or "".
 * JDBC escape syntax is parsed for Date, Time and Timestamp value.</p>
 * @return Parsed literal
 * @throws ParseException if parsing failed
 */
  final public Constant literal() throws ParseException {
    Token t = null;
    String strVal = null;
    Class escapeType = null;
    Constant constant = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRINGVAL:
      strVal = stringVal();
                        constant = new Constant(strVal, DataTypeManager.DefaultDataClasses.STRING);
      break;
    case INTEGERVAL:
      t = jj_consume_token(INTEGERVAL);
                        try {
                                // First try as integer - this should nearly always work
                                constant = new Constant(Integer.valueOf(t.image), DataTypeManager.DefaultDataClasses.INTEGER);
                        } catch(NumberFormatException e1) {
                                try {
                                        // Second try as a long
                                        constant = new Constant(Long.valueOf(t.image), DataTypeManager.DefaultDataClasses.LONG);
                                } catch(NumberFormatException e2) {
                                        try {
                                                // Third try as a biginteger
                                                constant = new Constant(new BigInteger(t.image), DataTypeManager.DefaultDataClasses.BIG_INTEGER);
                                        } catch(NumberFormatException e3) {
                                                Object[] params = new Object[] { t.image };
                                                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Integer_parse", params));} //$NON-NLS-1$
                                        }
                                }
                        }
      break;
    case FLOATVAL:
      t = jj_consume_token(FLOATVAL);
                        try {
                                constant = new Constant(Double.valueOf(t.image), DataTypeManager.DefaultDataClasses.DOUBLE);
                        } catch(NumberFormatException e) {
                                Object[] params = new Object[] { t.image };
                                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Float_parse", params));} //$NON-NLS-1$
                        }
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                               constant = new Constant(Boolean.FALSE, DataTypeManager.DefaultDataClasses.BOOLEAN);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                               constant = new Constant(Boolean.TRUE, DataTypeManager.DefaultDataClasses.BOOLEAN);
      break;
    case UNKNOWN:
      t = jj_consume_token(UNKNOWN);
                       constant = new Constant(null, DataTypeManager.DefaultDataClasses.BOOLEAN);
      break;
    case NULL:
      t = jj_consume_token(NULL);
                       constant = new Constant(null);
      break;
    case DATETYPE:
    case TIMETYPE:
    case TIMESTAMPTYPE:
    case BOOLEANTYPE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEANTYPE:
        jj_consume_token(BOOLEANTYPE);
                             escapeType=DataTypeManager.DefaultDataClasses.BOOLEAN;
        break;
      case TIMESTAMPTYPE:
        jj_consume_token(TIMESTAMPTYPE);
                            escapeType=DataTypeManager.DefaultDataClasses.TIMESTAMP;
        break;
      case DATETYPE:
        jj_consume_token(DATETYPE);
                            escapeType=DataTypeManager.DefaultDataClasses.DATE;
        break;
      case TIMETYPE:
        jj_consume_token(TIMETYPE);
                            escapeType=DataTypeManager.DefaultDataClasses.TIME;
        break;
      default:
        jj_la1[188] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      strVal = stringVal();
                        try {
                                constant = new Constant(DataTypeManager.transformValue(strVal, escapeType), escapeType);
                        } catch (TransformationException e) {
                                {if (true) throw new ParseException(e.getMessage());} //$NON-NLS-1$
                        }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[189] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return constant;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_3R_320() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(294)) {
    jj_scanpos = xsp;
    if (jj_scan_token(316)) return true;
    }
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_scan_token(NO)) return true;
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(294)) {
    jj_scanpos = xsp;
    if (jj_scan_token(316)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_238()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(XMLQUERY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    xsp = jj_scanpos;
    if (jj_3R_326()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_349()) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_344()) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_3R_50()) return true;
    if (jj_3R_302()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(XMLNAMESPACES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_344()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_345()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_58()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_349()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_232()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_3R_349()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(XMLFOREST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = "quote".equalsIgnoreCase(getToken(1).image);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_64()) return true;
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(XMLATTRIBUTES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_335()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(XMLELEMENT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = "name".equalsIgnoreCase(getToken(1).image);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_61()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(AS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(310)) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(XMLSERIALIZE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_scan_token(MAKENOTDEP)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(MAKEDEP)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) return true;
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_287()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_288()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(310)) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(XMLPARSE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = "texttable".equalsIgnoreCase(getToken(1).image);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(RIGHT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(157)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(FULL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(157)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(LEFT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(157)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(LOCAL)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(CROSS)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    if (jj_3R_50()) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(XMLPI)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = "name".equalsIgnoreCase(getToken(1).image);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(EACH)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_315()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_scan_token(TRANSLATE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(TRANSLATE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_313()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_289()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) return true;
    }
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_70()) return true;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(226)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(258)) {
    jj_scanpos = xsp;
    if (jj_scan_token(259)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(STRINGVAL)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STAR)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_304()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_303()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_302()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_296()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(CONVERT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_302()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = matchesAny(getToken(1).image, "to_chars", "to_bytes") != null;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_103()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = matchesAny(getToken(1).image, "timestampadd", "timestampdiff") != null;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_104()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).image.equalsIgnoreCase("querystring");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_67()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(XMLAGG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(213)) jj_scanpos = xsp;
    if (jj_scan_token(PROCEDURE)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(305)) {
    jj_scanpos = xsp;
    if (jj_scan_token(306)) {
    jj_scanpos = xsp;
    if (jj_scan_token(307)) {
    jj_scanpos = xsp;
    if (jj_scan_token(308)) {
    jj_scanpos = xsp;
    if (jj_scan_token(309)) {
    jj_scanpos = xsp;
    if (jj_scan_token(310)) {
    jj_scanpos = xsp;
    if (jj_scan_token(311)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_298()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(ALL_IN_GROUP)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    if (jj_3R_299()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_301() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(TRANSLATE)) return true;
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_165()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_3R_277()) return true;
    }
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_71()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(316)) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = matchesAny(getToken(1).image, "count", "min", "max", "sum", "avg", "every", "STDDEV_POP", "STDDEV_SAMP", "VAR_SAMP", "VAR_POP") != null;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(EXCEPT)) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(312)) {
    jj_scanpos = xsp;
    if (jj_scan_token(313)) return true;
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_283()) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_scan_token(305)) return true;
    }
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_266()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_252()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_152()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(314)) {
    jj_scanpos = xsp;
    if (jj_scan_token(315)) return true;
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_3R_271()) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(TIMETYPE)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(DATETYPE)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(BOOLEANTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(TIMESTAMPTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(HAS)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    }
    }
    if (jj_3R_238()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(UNKNOWN)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(FLOATVAL)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(OPTION)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(INTEGERVAL)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(2).kind != JOIN;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(CONCAT_OP)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_58()) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(INTEGERVAL)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_168()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_3R_302()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(ON)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(305)) {
    jj_scanpos = xsp;
    if (jj_scan_token(306)) {
    jj_scanpos = xsp;
    if (jj_scan_token(307)) {
    jj_scanpos = xsp;
    if (jj_scan_token(309)) {
    jj_scanpos = xsp;
    if (jj_scan_token(311)) {
    jj_scanpos = xsp;
    if (jj_scan_token(308)) {
    jj_scanpos = xsp;
    if (jj_scan_token(310)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    if (jj_scan_token(CRITERIA)) return true;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_351()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_351()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(NOCACHE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(MAKENOTDEP)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_350()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(XMLTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(MAKEDEP)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(OPTION)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) return true;
    }
    if (jj_scan_token(ON)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  public SQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[190];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
      jj_la1_9();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffff00,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x40000,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x40050000,0x40050000,0x40050000,0x40051000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x40,0x8,0x8,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x40000,0x100,0x100,0x100,0x0,0x20,0x0,0x0,0x0,0x2000,0x0,0x0,0x40000,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x6041010,0x0,0x6041010,0x0,0x10,0x6041010,0x0,0x0,0x0,0x0,0x6441810,0x6441810,0x6441810,0x6441810,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x20000,0x20000,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x6000000,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x20000000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x400000,0x0,0x400000,0x0,0x1,0x400000,0x0,0x0,0x0,0x0,0x402000,0x400000,0x402000,0x402000,0x0,0x4010000,0x4010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x2000000,0x0,0x100,0x400,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30040008,0x0,0x0,0x0,0x0,0x20040008,0x20040008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4010000,0x0,0x4010000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20001000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20001000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x10,0x0,0x10,0x10,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x60,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x80000,0x80000,0x0,0x80002,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10060,0x0,0x0,0x0,0x0,0x10060,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x100000,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x1000000,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x808000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x808000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x20200080,0x0,0x20200080,0x0,0x0,0x20200080,0x0,0x0,0x0,0x0,0x60200080,0x20200080,0x60200080,0x60200080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x20000080,0x0,0x0,0x0,0x20000000,0x2000000,0x200000,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x21000080,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x20000080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90000,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x80000000,0x80000000,0x200,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0xc,0x80003ca0,0x80000000,0x0,0x80000000,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_9() {
      jj_la1_9 = new int[] {0x2000,0x40000000,0xa000,0x40000000,0x0,0x2000,0x800,0x800,0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x0,0xfe0000,0xfe0000,0x800,0x20000,0x20000,0x20000,0x0,0x2000,0x20000,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000040,0x0,0x800,0x10000000,0x2000,0x0,0x0,0x0,0x800,0x400000,0x800,0x400000,0x2000,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x800,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x1000000,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x800,0x0,0x40,0x0,0x0,0x800,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe0000,0xfe0000,0x0,0xfe0000,0x2000,0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0x800,0x2000,0x800,0x800,0x0,0x0,0x0,0x10000040,0x10000040,0x800,0x0,0x800,0x800,0x800,0x0,0x0,0x80000000,0xc000000,0xc000000,0x3000000,0x3000000,0x100081fc,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x800,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x800,0x0,0x800,0x800,0x100,0x0,0x3c,0x1fc,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[62];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 190; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 190; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 190; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 190; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 190; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 190; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[320];
    for (int i = 0; i < 320; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 190; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 320; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 62; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
