
	//-------------------------------------------------------------------------------------------------
    //                               Creating a new VdbContext instance
    //-------------------------------------------------------------------------------------------------
    
    java.io.File vdbFile = ...          // path to the VDB file
    java.io.File vdbWorkingFolder = ... // path to working folder used to create temp directories
    com.metamatrix.vdb.edit.VdbContext context = new VdbContextImpl(vdbFile, vdbWorkingFolder);
	
	// Alternatively you could create the context using a static method on VdbEditPlugin
	org.eclipse.core.runtime.IPath pathToVdbFile  = new Path(vdbFile.getAbsolutePath());
	org.eclipse.core.runtime.IPath vdbWorkingPath = new Path(vdbWorkingFolder.getAbsolutePath());
	com.metamatrix.vdb.edit.VdbContext context = VdbEditPlugin.createVdbContext(pathToVdbFile, vdbWorkingPath);

    //-------------------------------------------------------------------------------------------------
    //        A VdbContext instance provides all the functionality to READ an existing VDB 
    //-------------------------------------------------------------------------------------------------
	
	// Checking if the VDB file is empty
	context.isEmpty();
	
	// Checking if the VDB file is readOnly
	context.isReadOnly();
	
	// Peeking at the contents of the VDB file without opening the context.  
	com.metamatrix.internal.core.xml.vdb.VdbHeader header = context.peekAtContents();
	
	// Checking if the VdbContext is open
	context.isOpen();
	
	// Opening the context which extracts the contents of the VDB archive to the 
	// a TempDirectory instance created when the VdbContext is first instantiated
	context.open(new NullProgressMonitor());
	
	// Iterating through the contents of the open VDB archive 
	for (Iterator i = context.getVirtualDatabase().getModels().iterator(); i.hasNext();) {
        ModelReference modelRef = (ModelReference)i.next();
        
        // Getting an InputStream to a model file within the VDB
        InputStream istream = context.getInputStream(modelRef);
    }
	for (Iterator i = context.getVirtualDatabase().getNonModels().iterator(); i.hasNext();) {
        NonModelReference nonModelRef = (NonModelReference)i.next();
        
        // Getting an InputStream to a non-model file within the VDB
        InputStream istream = context.getInputStream(nonModelRef);
    }
	
	// Closing the context will remove the TempDirectory and its contents.
	// The VdbContext instance can be opened again at any later point in time
	context.close(new NullProgressMonitor());
	
	// When finished with the VdbContext instance it needs to be disposed.  
	// By calling dispose all state associated with the context will be cleaned
	// up.  For example, the list of listeners registed with this context will 
	// be cleared.
	context.dispose();

	//-------------------------------------------------------------------------------------------------
    // Creating a new SharedWsVdbContextEditor instance.  A SharedWsVdbContextEditor should be used 
    // whenever the contents of a VDB file need to be modified and the modeler project and the context
    // editor share the same TempDirectory location (e.g. Siperian, DimensionDesigner).  There are 
    // no explicit add/remove operations on SharedWsVdbContextEditor but instead when 
    // SharedWsVdbContextEditor.save(...) is called the files contents of the TempDirectory is 
    // synchronized with the VDB's manifest model so that the resultant VDB file will match 
    // the TempDirectory.
    //-------------------------------------------------------------------------------------------------
    
    java.io.File vdbFile = ...          // path to the VDB file
    java.io.File vdbWorkingFolder = ... // path to working folder used to create temp directories
    org.eclipse.emf.ecore.resource.ResourceSet theSharedContainer = ModelerCore.getModelContainer();
    com.metamatrix.vdb.edit.VdbContextEditor editor =  new SharedWsVdbContextEditor(theVdbFile, vdbWorkingFolder, theSharedContainer);
    context.setVdbContextValidator(new SharedWsVdbContextValidator());
    context.addArtifactGenerator(new WsdlArtifactGenerator());
    context.addArtifactGenerator(new RuntimeIndexArtifactGenerator());
	
	// Alternatively you could create the context using a static method on VdbEditPlugin
	org.eclipse.core.runtime.IPath pathToVdbFile  = new Path(vdbFile.getAbsolutePath());
	org.eclipse.core.runtime.IPath vdbWorkingPath = new Path(vdbWorkingFolder.getAbsolutePath());
	com.metamatrix.vdb.edit.VdbContextEditor editor = VdbEditPlugin.createSharedWsVdbContextEditor(pathToVdbFile, vdbWorkingPath);

    //-------------------------------------------------------------------------------------------------
    // A SharedWsVdbContextEditor instance provides all the functionality to MODIFY a new 
    // or existing VDB file.
    //-------------------------------------------------------------------------------------------------
	
	// Checking if the VDB file is empty
	editor.isEmpty();
	
	// Checking if the VDB file is readOnly
	editor.isReadOnly();
	
	// Peeking at the contents of the VDB file without opening the editor.  
	com.metamatrix.internal.core.xml.vdb.VdbHeader header = editor.peekAtContents();
	
	// Checking if the VdbContextEditor is open
	editor.isOpen();
	
	// Opening the editor which extracts the contents of the VDB archive to the 
	// a TempDirectory instance created when the VdbContextEditor is first instantiated
	// and add the model files to the editor's shared container
	editor.open(new NullProgressMonitor());
	
	// Iterating through the contents of the open VDB archive 
	for (Iterator i = context.getVirtualDatabase().getModels().iterator(); i.hasNext();) {
        ModelReference modelRef = (ModelReference)i.next();
        
        // Getting an InputStream to a model file within the VDB
        InputStream istream = context.getInputStream(modelRef);
    }
	for (Iterator i = context.getVirtualDatabase().getNonModels().iterator(); i.hasNext();) {
        NonModelReference nonModelRef = (NonModelReference)i.next();
        
        // Getting an InputStream to a non-model file within the VDB
        InputStream istream = context.getInputStream(nonModelRef);
    }
	
	// Checking if the VdbContextEditor needs to be saved. A SharedWsVdbContextEditor
	// checks if the VDB's manifest model is in sync with the TempDirectory contents   
	editor.isSaveRequired();
	
	// Saving a VdbContextEditor
	editor.save(new NullProgressMonitor());
	
	// Saving the contents of the TempDirectory to a file other than the
	// one the VdbContextEditor was created with
	File differentVdbFile = ...
	editor.saveAs(new NullProgressMonitor(), differentVdbFile);
	
	// Renaming a VDB file 
	File renamedVdbFile = ...
	editor.saveAs(new NullProgressMonitor(), differentVdbFile);
	vdbWorkingPath	editor = VdbEditPlugin.createSharedWsVdbContextEditor(pathToVdbFile,vdbWorkingPath);

	
	// Closing the editor will remove the TempDirectory and its contents.
	// The VdbContextEditor instance can be opened again at any later point in time
	editor.close(new NullProgressMonitor());
	
	// When finished with the VdbContextEditor instance it needs to be disposed.  
	// By calling dispose all state associated with the context will be cleaned
	// up.  For example, the list of listeners registed with this context will 
	// be cleared.
	editor.dispose();
	
	
	
	
	
	