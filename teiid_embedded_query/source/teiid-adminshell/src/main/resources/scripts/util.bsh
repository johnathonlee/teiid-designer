import java.io.*;
import org.teiid.adminapi.*;
import com.metamatrix.core.util.*;
import java.lang.reflect.*;

debug=false;


getBshPrompt() { 
    if (currentContext().internalPrompt == void || currentContext().internalPrompt == null) {
        return "admin $ ";
    }
    return currentContext().internalPrompt;
}

byte[] readBinaryFile(String fileName) {
    InputStream is = null;
    
    if(fileName == null) {
        throw new IOException("fileName is null");
    }
    try {
        //try to load file from the classpath
        is = Object.class.getResourceAsStream("/"+fileName);
         
        byte[] result;
        if (is == null) {
            //load from "hardcoded" path        
            is = new FileInputStream(new File(fileName));
        }
    

    }catch(Exception e) {
         if (is == null) {
         	try {
            //load from "hardcoded" path        
            	is = new FileInputStream(new File(fileName));
            }catch(Exception e2) {
                
       			 e.printStackTrace(); 
        		 return null;
            }
         } 

    }
    
	//convert to bytes
        result = convertToByteArray(is);
        try {
        	is.close();
        }catch(Exception e3) {
        }    
        return result;
}

char[] readTextFile(String fileName) {
    if(fileName == null) {
        throw new IOException("fileName is null");
    }
    char[] result = null;

    try {
      File file = new File(fileName);
 
    // changed to use the ObectConverterUtil, instead of the
    // convertToCharArray() method because it doesn't completely
    // convert the file, the XML reader throws a malform exception
    // the test case for ServerAdminImpl also the ObjectConverterUtil
    // that's why this was changed to use it
      result = ObjectConverterUtil.convertFileToCharArray(file, null);
    
    }catch(e) {
        e.printStackTrace();
    } 
    return result;
}

byte[] convertToByteArray(InputStream in) throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream(10 * 1024);
    int b = 0;
    while ((b = in.read()) != -1) {
        out.write(b);
    }
    return out.toByteArray();    
}

char[] convertToCharArray(InputStream in) throws IOException {
    CharArrayWriter out = new CharArrayWriter(10 * 1024);
    int b = 0;
    while ((b = in.read()) != -1) {
        out.write(b);
    }
    return out.toCharArray();    
}

cleanUpDirectory(String dirName, String[] filesToKeep){
    dir = new File(dirName);
    if (dir.exists()) {
        files = dir.listFiles();    
        for (File f:files) {
            delete = true;
            for (String keep:filesToKeep) {            
                if (f.getName().equalsIgnoreCase(keep)) { 
                    delete = false;
                }
                if (f.getName().endsWith(".deleted")) { 
                    delete = false;
                }                            
            }
            if (delete) f.delete();
        }
    }
}

void checkAdmin() {
    context = currentContext();
    if (context == void || context == null) {
        throw new Exception("Not connected.  You must call a \"connect\" method");
    } 
    
    if (context.internalAdmin == void || context.internalAdmin == null) {
        throw new Exception("Not connected.  You must call a \"connect\" method");
    }      
}

debug(Object msg){
    if (debug) {
        if (msg instanceof Collection) {
            for (Object object:msg) {
                print(object);
            }
        } else {
            print(msg);
        }
    }
}

String extractVDBName(url) {
    str = "jdbc:metamatrix:";
    strteiid = "jdbc:teiid:";
    if (url.startsWith(str)) {
        int at = url.indexOf("@");
        if (at != -1) {
            return url.substring(str.length(), at);
        }
    }
    else if (url.startsWith(strteiid)) {
        int at = url.indexOf("@");
        if (at != -1) {
            return url.substring(strteiid.length(), at);
        }
    }
    return "";
}

String extractHost(url) {
    str = "jdbc:metamatrix:";
    strteiid = "jdbc:teiid:";
    if (url.startsWith(str)) {
        int at = url.indexOf("@")+1;
        return url.substring(at, url.indexOf(";", at));
    }
    else if (url.startsWith(strteiid)) {
        int at = url.indexOf("@")+1;
        return url.substring(at, url.indexOf(";", at));
    }
    return "";
}

class ExceptionHandler implements InvocationHandler{
	Object impl;
	ExceptionHandler(Object obj){
		impl=obj;
	}
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		try {
			return method.invoke(impl, args);
		} catch (InvocationTargetException e) {
			Throwable ex = e;
			while (ex instanceof InvocationTargetException) {
				ex = e.getTargetException();
			}
			if (ex instanceof AdminException) {
				print("Error:"+ex.getMessage());
			}
		} catch(AdminComponentException e) {
			print(e.getClass().getName() +" Error:"+e.getMessage());
		} catch (AdminProcessingException e) {
			print(e.getClass().getName() +" Error:"+e.getMessage());
		} catch(Throwable t) {
			print(t.getClass().getName() +" Error:"+e.getMessage());
		}
		return null;
	}	
}

Object createExceptionHandlingProxy(Object obj) {
	return Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), new ExceptionHandler(obj));	
}

quit(){
    exit();
}
