import bsh.BSHFormalComment;
import bsh.BSHMethodDeclaration;
import bsh.Parser;


//print out available methods
//todo: how to print only Admin methods?
protected help(java.util.List urls) {
    methods = parseMethods(urls);
    
    for (iter = methods.iterator(); iter.hasNext(); ) {
        method = iter.next();
        string = method.signature;
        print(string);
    }    
}


protected help(java.util.List urls, String methodName) {
  methods = parseMethods(urls);
  methodName = methodName.replaceAll("\\*", ".*");
  
  for (iter = methods.iterator(); iter.hasNext(); ) {
      method = iter.next();      
      if (method.name.matches(methodName)) {
          if (method.comment != null) {
              print(method.comment + "\n" + method.signature + "\n");
          } else {
              print(method.signature + "\n");
          }
      }
  }    
}



//get Collection of MethodAndComment objects, sorted by name
private Collection parseMethods(java.util.List urls) {
    methods = new TreeSet();    

    for (iter = urls.iterator(); iter.hasNext(); ) {
        url = iter.next();
        is = url.openStream();
        parser = new Parser(is);
        parser.setRetainComments(true);
        
        
        lastNode = null;
        firstComment = null;
        while(!parser.Line()) {
            node = parser.popNode();
            
            if (node instanceof BSHFormalComment && firstComment == null) {
                firstComment = node;
            }
            
            if (node instanceof BSHMethodDeclaration && !exclude(node)) {
                sig=node.getText();
                int i=sig.indexOf('{');
                if (i > -1) {
                    sig=sig.substring(0,i);
                }
                
                method = new MethodAndComment();
                method.name = node.name;
                method.signature = sig;
                
                if (lastNode instanceof BSHFormalComment) {
                    method.comment = lastNode.text;
                    
                    if (firstComment == lastNode) {
                        firstComment = null;
                    }
                }
                methods.add(method);
            }
            lastNode = node;
        }
        
        try { is.close(); } catch (Exception e) {}
    }
    
    return methods;
}


//don't print private or protected methods
private boolean exclude(BSHMethodDeclaration method) {
    modifiers = method.modifiers;
    if (modifiers == null) {
        return false;
    }
    return (modifiers.hasModifier("private") || modifiers.hasModifier("protected"));
}




private class MethodAndComment implements Comparable {
    String name;
    String signature;
    String comment;
    
    public int compareTo(Object o) {
        return (name+signature).compareTo(o.name+o.signature);
    }    
}





