<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="extendingjdbc">
  <title>Extending the JDBC Connector</title>
  <para>The JDBC Connector can be extended to handle new JDBC drivers and database versions.  This chapter outlines the process by which a customer or consultant can modify the behavior of the JDBC Connector for a new source</para>
 
 
  <sect1>
    <title>Extension Interfaces</title>
    <para>The JDBC Connector provides four extension interfaces that can be used to customize its behavior.  Activate an extension by implementing the appropriate interface and specifying the implementation class name in the appropriate connector binding property.</para>
    <para>The JDBC Connector loads each of the implementations of these interfaces via reflection and requires that each of these classes have a no-argument constructor.  Each extension class will be loaded exactly once and use for the life of a connector binding.  Connector bindings never share instances of the extension classes.</para>
    <para>This table summarizes the available extension points and their purpose.  Following the table is a more detailed look at each extension type.</para>

      <table frame='all'>
        <title>Extension Interfaces</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
          <colspec colname='c1' colwidth="1*"/>
          <colspec colname='c2' colwidth=".5*"/>
          <colspec colname='c3' colwidth="2*"/>
          <thead>      
            <row>
              <entry><para>Extension</para></entry>
              <entry><para>Connector Property</para></entry>
              <entry><para>Purpose</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>Connection Factory</para></entry>
              <entry><para>ExtensionConnectionFactoryClass</para></entry>
              <entry><para>Customize connection creation and pooling.</para></entry>
            </row>
            <row>
              <entry><para>Connector Capabilities</para></entry>
              <entry><para>ExtensionCapabilityClass</para></entry>
              <entry><para>Specify the SQL syntax and functions the source supports.</para></entry>
            </row>
            <row>
              <entry><para>SQL Translator</para></entry>
              <entry><para>ExtensionSQLTranslationClass</para></entry>
              <entry><para>Customize what SQL syntax is used, how source-specific functions are supported, how procedures are executed.</para></entry>
            </row>
            <row>
              <entry><para>Results Translator</para></entry>
              <entry><para>ExtensionResultsTranslationClass</para></entry>
              <entry><para>Customize how results are retrieved from JDBC and translated.</para></entry>
            </row>            
          </tbody>
        </tgroup>
      </table>
      
      <sect2>
        <title>Connection Factory Extension</title>
        <para>The Connection Factory extension can be used to plug in a new factory for creating JDBC Connection objects.  The factory class is used within the JDBC connection pool and also controls how connections are pooled and maintained.  The Connection Factory implementation class is constructed once and reused throughout the life of the connector.</para>
        <para>The interface to implement is the standard connection factory interface from the Connector API connection pool utility: com.metamatrix.data.pool.SourceConnectionFactory.  This interface and its implementation are described in detail in the Connector Developer’s Guide chapter on connection pooling. </para>
        <para>However, the JDBC Connector provides a number of useful abstract implementations that can make the implementation somewhat easier:</para>

      <table frame='all'>
        <title>Connection Factories</title>
        <tgroup cols='4' align='left' colsep='1' rowsep='1'>
          <colspec colname='c1' colwidth="1*"/>
          <colspec colname='c2' colwidth=".5*"/>
          <colspec colname='c3' colwidth="2*"/>
          <colspec colname='c4' colwidth="2*"/>
          <thead>      
            <row>
              <entry><para>Class</para></entry>
              <entry><para>Pooling</para></entry>
              <entry><para>Connection Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>SourceConnection Factory</para></entry>
              <entry><para>Depends on implementation</para></entry>
              <entry><para>Depends on implementation</para></entry>
              <entry><para>This is the basic interface – implementing at this level gives you complete freedom to create connections and control pooling in whatever way necessary.</para></entry>
            </row>
            <row>
              <entry><para>JDBCSource ConnectionFactory</para></entry>
              <entry><para>Depends on implementation</para></entry>
              <entry><para>Depends on implementation</para></entry>
              <entry><para>Adds JDBC-specific facilities for connection events, interpreting transaction isolation levels, strategies for determing whether connection is alive, etc.</para></entry>
            </row>
            <row>
              <entry><para>JDBCSingleIdentity ConnectionFactory</para></entry>
              <entry><para>Create a single connection pool for all connections in a connector binding using the connector binding connection properties.</para></entry>
              <entry><para>DriverManager</para></entry>
              <entry><para>Uses a single pool (the most common usage) and DriverManager to obtain connections.</para></entry>
            </row>
            <row>
              <entry><para>JDBCSingleIdentity DSConnectionFactory</para></entry>
              <entry><para>Create a single connection pool for all connections in a connector binding using the connector binding connection properties.</para></entry>
              <entry><para>DataSource</para></entry>
              <entry><para>Uses a single pool (the most common usage) and a DataSource to obtain connections.</para></entry>
            </row>
            <row>
              <entry><para>JDBCUserIdentity ConnectionFactory</para></entry>
              <entry><para>Create one pool per MetaMatrix user.  Subclasses must determine how to obtain each user’s authentication information from the connector properties or trusted payloads.</para></entry>
              <entry><para>DriverManager</para></entry>
              <entry><para>Uses a per-user pool when pooling connections.</para></entry>
            </row>                                 
          </tbody>
        </tgroup>
      </table>
      <para>For more information on how to subclass and use these abstract classes, see the examples later in this chapter.</para>
      </sect2>
      
      <sect2>
        <title>Connector Capabilities Extension</title>
        <para>This extension must implement the com.metamatrix.data.api.ConnectorCapabilities interface, which is the standard Connector API interface for describing connector capabilities.  </para>
        <para>It is strongly recommended that any implementation of the ConnectorCapabilities interface should subclass the JDBC version com.metamatrix.connector.jdbc.extension.JDBCCapabilities or minimally, the com.metamatrix.data.basic.BasicConnectorCapabilities base class.  Subclassing these will protect custom implementations from breaking when new capabilities are added to the API. </para>
        <para>This extension often must be modified in tandem with the SQL Translation Extension to modify the capabilities of the connector.  The most common example is adding support for a scalar function – this requires both declaring that the connector has the capability to execute the function and often modifying the SQL Translator to translate the function appropriately for the source.</para>
        <para>Another common example is turning off unsupported SQL capabilities (such as outer joins or subqueries) for less sophisticated JDBC sources. </para>        
      </sect2>

      <sect2>
        <title>SQL Translation Extension</title>
        <para>The com.metamatrix.connector.jdbc.extension.SQLTranslator interface defines this extension.  It provides ways to modify the command entering the JDBC Connector (in object form) before it is sent to the JDBC driver (as an SQL string).  The JDBC Connector defines a base class that should be subclassed when implementing this extension</para>
        
        <para><emphasis>com.metamatrix.connector.jdbc.extension.impl.BasicSQLTranslator</emphasis></para>
        
        <para>The SQLTranslator implementation class is constructed once and reused throughout the life of the connector, so it must not maintain any query-specific state. </para>
        <para>Common functions that the SQLTranslator can perform are:</para>
        
        <orderedlist>
          <listitem>
            <para>Arbitrarily modify the object form of a command before translation </para>
          </listitem>
          <listitem>
            <para>Register one or more “function modifiers” that define how a scalar function should be modified or transformed</para>
          </listitem>
          <listitem>
            <para>Change the way SQL strings are formed from the object for m of a command</para>
          </listitem>
      </orderedlist>
      <para>For more information on how these functions can be performed, see the examples later in this chapter.</para>
      </sect2>
      
      <sect2>
        <title>Results Translation Extension</title>
        <para>The com.metamatrix.connector.jdbc.extension.ResultsTranslator interface defines ways to modify the results as they are read and returned from the JDBC driver to the MetaMatrix Server.  The ResultsTranslator implementation class is constructed once and reused throughout the life of the connector, so it should generally not maintain any query-specific state.  Common functions that the ResultsTranslator can perform are:</para>
        <orderedlist>
          <listitem>
            <para>Execute a stored procedure against the driver</para>
          </listitem>
          <listitem>
            <para>Execute a prepared statement with large objects against the driver</para>
          </listitem>
          <listitem>
            <para>Execute a statement for bulk insert</para>
          </listitem>
          <listitem>
            <para>Retrieve values from the JDBC ResultSet</para>
          </listitem>
          <listitem>
            <para>Translate values returned from JDBC into the types expected by MetaMatrix</para>
          </listitem>     
          <listitem>
            <para>Arbitrarily modify a batch of results</para>
          </listitem>                          
      </orderedlist>       
      
      <para>For more information on how these functions can be performed, see the examples later in this chapter.</para> 
      </sect2>
  </sect1>
  
  <sect1>
    <title>Developing Extensions</title>
    <para>When developing a new JDBC Connector extension, you should start with the development environment used to develop any connector, as defined in the Connector Developer’s Guide.  Standard connector development requires the inclusion of the following jar:  </para>
        <orderedlist>
          <listitem>
            <para>metamatrix-cdk.jar – This jar contains the complete environment needed for developing custom connectors.  It can be found in the MetaMatrix Tools kit.</para>
          </listitem>
          <listitem>
            <para>jdbcconn.jar – The JDBC Connector jar, which can be found in the MetaMatrix Server’s installation directory under SERVER\config\extensions or exported from the pre-installed extension modules in the MetaMatrix Console.</para>
          </listitem>
          <listitem>
            <para>MetaMatrixLicense.xml – A valid license for the MetaMatrix JDBC Connector.  Your classpath should include a directory containing this file. </para>
          </listitem>
          <listitem>
            <para>MJjdbc.jar – OPTIONAL – If extending an existing MetaMatrix JDBC Connector for access to Oracle, SQL Server, DB2, or Sybase, you may need this jar that contains the actual JDBC drivers for those sources.</para>
          </listitem>                         
      </orderedlist>    
  </sect1>
  
  <sect1>
    <title>Installing Extensions</title>
    <para>Once you have developed an extension to the JDBC Connector, you must install it into the MetaMatrix Server.  This process involves creating and installing a Connector Archive File (CAF).  Refer to the Connector Developer’s Guide for instructions on creating and installing CAF files.</para>
    
    <sect2>
      <title>Connector Archive File Contents</title>
      <para>When creating your Connector Archive File, you need to include the following jars:</para>
        <orderedlist>
          <listitem>
            <para>jdbcconn.jar (described above) – This contains the base JDBC Connector code.</para>
          </listitem>
          <listitem>
            <para>JDBC drivers – Any drivers needed to access the data source must be included.  If you are extending the MetaMatrix JDBC Connector for Oracle, SQL Server, DB2, or Sybase, you will need to include MJjdbc.jar.</para>
          </listitem>
          <listitem>
            <para>Connector jars – Any custom code that extends the JDBC Connector must be compiled and placed in a JAR file for inclusion in the CAF.</para>
          </listitem>
          <listitem>
            <para>External libraries – Any additional JAR files that are needed by your connector must be included.</para>
          </listitem>    
          <listitem>
            <para>Other JDBC jars – OPTIONAL – If extending an existing MetaMatrix JDBC Connector other than those whose drivers are found in MJjdbc.jar (see list above), you will need the JDBC jar provided by that vendor.  For example to extend the MySQL connector you would need their mysql-connector-java-5.1.5-bin.jar (5.1.5 is the version number and will vary).</para>
          </listitem>                                
      </orderedlist>      
    </sect2>
    
    <sect2>
      <title>Connector Type Definition</title>
      <para>In addition to the JAR files, you will need to create a Connector Type Definition file as described in the Connector Developer’s Guide.  This Connector Type Definition file (.cdk file extension) is an XML file describing the properties needed by your JDBC Connector.  </para>
      <para>Typically, the easiest way to create a new Connector Type Definition file to extend the JDBC Connector is to export the JDBC Connector Type from the MetaMatrix Console and modify it.  When doing this, you will need to modify the following items:</para>
      <orderedlist>
          <listitem>
            <para>ComponentType Name – name your Connector Type</para>
          </listitem>
          <listitem>
            <para>ComponentType SuperComponent – should be an existing Connector Type such as “JDBC Connector”.  If you are extending an existing connector type, that should be specified as the SuperComponent</para>
          </listitem>
      </orderedlist>             
      <para>Property value defaults – each property’s default value should be reviewed and updated.  In particular the extension class properties should be updated to activate your extension classes.</para>
    </sect2>
  </sect1>
</chapter>