<?xml version="1.0" encoding="UTF-8"?>
<project name="Build plug-in" default="build.jars" basedir=".">

	<pluginIdProperty name="bundleId" />
	<pluginSourceJarProperty name="plugin.source.jar" />

	<property name="basews" value="${ws}" />
	<property name="baseos" value="${os}" />
	<property name="basearch" value="${arch}" />
	<property name="basenl" value="${nl}" />

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="false" />
	<property name="javacDebugInfo" value="on" />
	<property name="javacVerbose" value="false" />
	<property name="logExtension" value=".log" />
	<property name="compilerArg" value="" />
	<property name="javacSource" value="1.3" />
	<property name="javacTarget" value="1.2" />
	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<os family="mac" />
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib" />
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar" />
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath" />
	<condition property="bundleBootClasspath" value="${JavaSE-1.6}">
		<isset property="JavaSE-1.6" />
	</condition>
	<condition property="bundleJavacSource" value="1.6">
		<isset property="JavaSE-1.6" />
	</condition>
	<condition property="bundleJavacTarget" value="1.6">
		<isset property="JavaSE-1.6" />
	</condition>
	<property name="bundleJavacSource" value="${javacSource}" />
	<property name="bundleJavacTarget" value="${javacTarget}" />
	<property name="bundleBootClasspath" value="${bootclasspath}" />

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder" />
		</condition>
		<property name="pluginTemp" value="${basedir}" />
		<condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${feature.version}">
			<isset property="buildTempFolder" />
		</condition>
		<property name="build.result.folder" value="${basedir}" />
		<property name="temp.folder" value="${basedir}/temp.folder" />
		<property name="plugin.destination" value="${basedir}" />
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: ${bundleId} for an update site.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<jar destfile="${plugin.destination}/${bundleId}_${feature.version}.jar" basedir="${temp.folder}/${bundleId}_${feature.version}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" />
	</target>

	<target name="build.jar" depends="init" if="'compile" unless="built.jar" description="Create jar: ${bundleId} ${plugin.source.jar}.jar.">
		<delete dir="${temp.folder}/${plugin.source.jar}.jar.bin" />
		<mkdir dir="${temp.folder}/${plugin.source.jar}.jar.bin" />
		<requiredPluginsPath name="requiredPlugins" />
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/${plugin.source.jar}.jar.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}">
			<compilerarg line="${compilerArg}" compiler="${build.compiler}" />
			<classpath refid="requiredPlugins" />
			<src path="src/" />
			<compilerarg value="@${basedir}/javaCompiler.${plugin.source.jar}.jar.args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
			<compilerarg line="-log '${temp.folder}/${plugin.source.jar}.jar.bin${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/${plugin.source.jar}.jar.bin" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java" />
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>
		<mkdir dir="${build.result.folder}" />
		<jar destfile="${build.result.folder}/${plugin.source.jar}.jar" basedir="${temp.folder}/${plugin.source.jar}.jar.bin" />
		<delete dir="${temp.folder}/${plugin.source.jar}.jar.bin" />
	</target>

	<target name="src.zip" depends="init" unless="${plugin.source.jar}src.zip">
		<mkdir dir="${build.result.folder}" />
		<antcall target="zip.src.zip" />
	</target>
	<target name="zip.src.zip">
		<zip destfile="${build.result.folder}/${plugin.source.jar}src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/">
				<include name="**/*.java" />
			</fileset>
		</zip>
	</target>
	<target name="copy.src.zip">
		<copy todir="${source.destination.folder}/${plugin.source.jar}src" failonerror="true" overwrite="true">
			<fileset dir="src/">
				<include name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
		<available property="compile" file="src" />
		<available property="built.jar" file="${build.result.folder}/${plugin.source.jar}.jar" />
		<antcall target="build.jar" />
	</target>

	<target name="build.sources" depends="init">
		<available property="${plugin.source.jar}src.zip" file="${build.result.folder}/${plugin.source.jar}src.zip" />
		<antcall target="src.zip" />
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleId}_${feature.version}" />
		<copy todir="${destination.temp.folder}/${bundleId}_${feature.version}" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}">
				<include name="${plugin.source.jar}.jar" />
			</fileset>
		</copy>
		<includedResourcesPath name="includedResources" />
		<echo message="Copy start..." />
		<copy todir="${destination.temp.folder}/${bundleId}_${feature.version}" failonerror="true" overwrite="false">
	            <path>
	                <path refid="includedResources" />
	            </path>
				<!--				
                <include name="${includedResources}" />
				<include name="plugin.xml" />
				<include name="plugin.properties" />
				<include name="icons/" />
				<include name=".debug" />
				<include name="${plugin.source.jar}.jar" />
				<include name="META-INF/" />
-->
		</copy>
        <echo message="Copy end..." />
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleId}_${feature.version}" />
		<copy file="${build.result.folder}/${plugin.source.jar}src.zip" todir="${destination.temp.folder}/${bundleId}_${feature.version}" failonerror="false" overwrite="false" />
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/${bundleId}_${feature.version}" />
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.zip">
			<param name="source.destination.folder" value="${destination.temp.folder}" />
		</antcall>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}" />
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleId}_${feature.version}" />
		<copy todir="${destination.temp.folder}/${bundleId}_${feature.version}" failonerror="false" overwrite="false">
			<fileset dir="${temp.folder}">
				<include name="${plugin.source.jar}.jar.bin${logExtension}" />
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: ${bundleId} of all the zips, jars and logs created.">
		<delete file="${build.result.folder}/${plugin.source.jar}.jar" />
		<delete file="${build.result.folder}/${plugin.source.jar}src.zip" />
		<delete file="${plugin.destination}/${bundleId}_${feature.version}.jar" />
		<delete file="${plugin.destination}/${bundleId}_${feature.version}.zip" />
		<delete dir="${temp.folder}" />
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="/home/jverhaeg/workspace/metamatrix/${bundleId}" property="resourcePath" />
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: ${bundleId}.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="build.sources" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}" />
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/${bundleId}_${feature.version}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false" />
		<delete dir="${temp.folder}" />
	</target>

</project>
