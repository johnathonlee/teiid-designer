<link rel="stylesheet" href="designer_help.css" type="text/css" />
<body>
<p><a href="DesignerTOC.htm"><img src="images/Designer_WebHeader.png" alt="MMHeader" border="0" /></a></p>
<hr>
<p class="maintitle_b24">VDB Facts </p>

<ul class="small_toc_item">
  <li><a href="#What">Description</a></li>
  <li><a href="#How">How is a VDB Defined?</a></li>
  <li><a href="#Validation">VDB Validation</a></li>
  <li><a href="#Deploy">Deploying a VDB for Data Access</a></li>
  <li><a href="#Access">VDBs and Connector Bindings</a></li>
  <li><a href="#Execution">Testing Your VDB</a></li>
  <li><a href="#File">VDB File Formats</a></li>
</ul>

<h3 class="subtitle_b16"><a name="What"></a>VDB Description</h3>
<p class="style4"> <span class="medium">A <strong>VDB</strong>, or <strong>V</strong>irtual <strong>D</strong>ata<strong>b</strong>ase is a container for your models and pertinent source connection data used by the query engine to access your federated data. </span></p>
<p class="medium"><img src="images/views/VDBInternals.gif" width="267" height="267" hspace="20" /></p>

<h3 class="subtitle_b16"><a name="How"></a>How is a VDB Defined?</h3>
<p class="medium" ><strong> Federate Designer</strong> allows you to create and edit <strong>VDB</strong>s. The <strong>VDB</strong> is a zip-like file that contains <strong>sources</strong> and <strong>view</strong> <strong>models</strong>, <strong>source connection properties</strong> files and <strong> index</strong> files used at runtime for data identification and a <strong>manifest</strong> to pull it all together. </p>

<h3 class="subtitle_b16"><a name="Validation">VDB Validation</h3>
<p class="medium"><strong>VDBs</strong> can contain one or more models representing the information to be integrated and exposed to consuming applications. Models must be in a valid state in order for the VDB to be used for data access. Validation of a single model means that it must be in a self-consistent and complete state, meaning that there are no &quot;missing pieces&quot; and no references to non-existent entities. Validation of multiple models checks that all inter-model dependencies are present and resolvable. </p>
<p class="medium">A <strong>VDB</strong> must always be in a complete and valid state in order to be successfully deployed or <a href="ExecuteVdbHelp.htm">tested in  Designer.</a> Complete means that all information is contained within the <strong>VDB </strong>itself -- there are no external dependencies. During the creation or editing of your VDB, there may be times when errors exist and the VDB can not be deployed or tested, but it can be saved for editing at a later date. </p>

<h3 class="subtitle_b16"><a name="Deploy">Deploying a VDB for Data Access </h3>
<p class="medium">After a VDB is defined, it must be deployed to the MetaMatrix query engine to be accessed. </p>
<p class="medium"><img src="images/views/MMQueryEngineWithVDB.gif" width="477" height="167" /></p>

<h3 class="subtitle_b16"><a name="Access">VDB and Connector Bindings </h3>
<p class="medium"><strong>VDB</strong>s contain two primary varieties of model types - source and view. <strong>Source</strong> models represent the structure and characteristics of physical data sources, whereas <strong>view</strong> models represent the structure and characteristics of abstract structures you want to expose to your applications.</p>
<p class="medium">A <strong>connector binding</strong> is the collection of information stored in a VDB which  provides the connectivity to a source for the query engine when it is executing federated queries against multiple a source.</p>
<p class="medium"> <strong>Source</strong> models must be associated with a single<strong> connector binding</strong>. It is possible that multiple models may use the same binding, but each model must have a binding. </p>
<p class="medium">You can define <strong>connector bindings</strong> in the <strong> Designer</strong> via the <a href="ConnectorBindingsHelp.htm">Connector Bindings Editor</a>. If you <a href="ImportJdbc.htm">import your source data</a> from relational data sources within <strong> Designer</strong>, your bindings can be automatically created "under the hood". </p>
<p class="medium">Any passwords required by bindings for connecting to sources are stored in encrypted form.</p>
<p class="medium"> Once defined, connector bindings are stored with a VDB, so that when a VDB is exchanged, the existing bindings can be used.
  .</p>

<h3 class="subtitle_b16"><a name="Execution">Testing Your VDB </h3>
<p class="medium"><strong>VDB</strong>s can be tested in  <strong> Designer</strong> by issuing SQL queries in the   <a href="DesignerPerspectives.htm#sqlExplorerPerspective">Sql Explorer</a> perspective. In this way, you can iterate between   defining your integration models and testing them out to see if they are   yielding the expected results. </p>
<p class="medium">Your <strong>VDB</strong> must have <strong>connector bindings</strong> associated with all <strong>source</strong> models in   order to be executable. You can define the <a href="ConnectorBindingsHelp.htm">bindings</a> for each source model in the   Designer.</p>

<h3 class="subtitle_b16"><a name="File">VDB File Format </h3>
<p class="medium"><strong>VDB</strong>s are stored in an archive file format, similar to a standard Java JAR format, except for the &quot;.vdb&quot; file extension. </p>
<p class="medium"><strong>VDB</strong> archive files can be exchanged.</p>
<p class="medium"><strong>VDB</strong>s can be exported from the Designer or Federate Console and subsequently re-imported into another Console, or opened in Designer</p>

<p class="subtitle_b16">Related Topics</p>
<ul>
  <li><a href="CreateVirtualDatabase.htm" class="medium">Create a New VDB</a></li>
  <li><a href="DesignerGettingStarted.htm" class="medium">Getting Started with Designer</a> </li>
</ul>
<hr>
<p class="copyright">See the LEGAL.txt file distributed with this work for information regarding copyright ownership and licensing.</p>
</body>

